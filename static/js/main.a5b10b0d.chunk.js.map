{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["reversed","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","Set","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","makeWptFyiUrl","path","params","arguments","url","URL","concat","defaults","_i","_ref3","_ref2","Object","slicedToArray","key","searchParams","append","_arr","keys","_loop","_i2","forEach","x","urlParams","UrlParams","classCallCheck","window","location","history","replaceState","document","title","href","name","get","set","_update","delete","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","state","bugComponentsMap","setState","currentBugComponent","onPathsChange","pathsArray","from","sort","join","bugComponents","Map","wptRuns","geckoMetadata","indexName","artifactName","fetch","taskResp","json","taskData","taskId","taskStatusResp","taskStatus","status","runs","run","runId","artifactsResp","artifacts","artifactData","find","artifact","endsWith","artifactResp","loadTaskClusterData","componentData","processComponentData","components","componentsMap","push","bugComponent","urlPaths","split","filter","runsUrl","aligned","runsResp","runsJson","redirect","dataResp","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","loadWptRunData","geckoMetadataPromise","loadGeckoMetadata","Promise","all","makeRe","pathPrefixes","RegExp","pathRe","map","slice","notPaths","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","values","test","notPathRe","data","allMetadata","_arr2","_i3","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","pop","_stack$pop2","basePath","obj","found","_arr3","_i4","filename","exec","relPath","react_default","createElement","id","App_RunInfo","App_BugComponentSelector","App_TestPaths","onChange","App_Tabs","App_ResultsView","label","failsIn","passesIn","App_GeckoData","filterGeckoMetadata","Component","RunInfo","shortRev","revision","sha","full_revision_hash","BugComponentSelector","handleChange","event","_this2","target","selectItems","TestPaths","_this3","onCheckboxChange","checked","add","onUpdateClick","prevProps","_this4","listItems","App_Checkbox","onClick","disabled","Checkbox","_this5","type","ResultsView","_this6","loaded","results","query","run_ids","item","and","topAndClause","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","browser","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","not","browser_name","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","orClause","or","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","pattern","searchQuery","buildQuery","method","body","JSON","stringify","headers","Content-Type","searchResp","searchData","_this7","children","testItems","result","App_TestItem","legacy_status","total","reduce","y","fetchIfPossible","fetchResults","TestItem","_this8","handleClick","showDetails","testUrl","resultUrl","metaUrl","className","App_TestDetails","visible","TestDetails","_this9","_this10","resultBySubtest","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_ref8","_ref5","browserResults","message","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","subtests","subtest","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","resultByBrowser","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","filteredResultBySubtest","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_loop2","_ref6","_ref7","_iterator10","rv","resultData","_iterator13","_iteratorNormalCompletion13","_step13","summaryUrl","results_url","parts","then","resp","promise","filteredResults","processResultData","_this11","headerRow","resultRows","_ref12","_ref13","App_ResultRow","ResultRow","_this12","cells","App_ResultCell","ResultCell","GeckoData","lsan","crashes","_arr4","entries","_i5","_ref16","_ref15","dir","dirData","expected_CRASH","cond","_tests","_arr5","_i6","_ref19","_ref18","testData","testKey","_subtests","_arr6","_i7","_ref22","_ref21","subtestData","subtestKey","content","console","log","byType","groupData","items","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_ref25","_ref24","App_GeckoMetadataLine","render","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_ref28","_ref27","App_MaybeBugLink","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_ref31","_ref30","App_LsanListValue","GeckoMetadataLine","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_ref34","_ref33","condition","conditionStr","valueList","MaybeBugLink","_arr7","_i8","match","LsanListValue","frames","Tabs","_this13","handleClickTab","activeTab","_this14","tabItems","child","App_Tab","active","activeTabContent","Tab","_this15","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5b10b0d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://staging.wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nfunction* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nfunction arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nfunction setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    for (let [key, value] of defaults) {\n        url.searchParams.append(key, value);\n    }\n    for (let key of Object.keys(params)) {\n        let value = params[key];\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location)\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst urlParams = new UrlParams();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            wptRuns: null,\n            geckoMetadata: {}\n        };\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let taskResp = await fetch(`${TASK_INDEX_BASE}/${indexName}`);\n        let taskData = await taskResp.json();\n        let taskId = taskData.taskId;\n        let taskStatusResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/status`);\n        let taskStatus = await taskStatusResp.json();\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifactsResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`);\n        let artifacts = await artifactsResp.json();\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        let artifactResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`);\n        return artifactResp.json();\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let runsUrl = makeWptFyiUrl(\"api/runs\", {aligned: \"\"});\n        let runsResp = await fetch(runsUrl);\n\n        let runsJson = await runsResp.json();\n\n        this.setState({wptRuns: runsJson});\n    }\n\n    async loadGeckoMetadata() {\n//        let metadata = await this.loadTaskClusterData(\"index.gecko.v2.try.latest.source.source-wpt-metadata-summary\",\n//                                                      \"summary.json\");\n        let dataResp = await fetch(`https://queue.taskcluster.net/v1/task/eaGx0TqWSEiGoSBS_1YDcw/runs/0/artifacts/public/summary.json`,\n                                  {redirect: \"follow\"});\n        let metadata = await dataResp.json();\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return null;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n        return data;\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        return (\n            <div id=\"app\">\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              <section id=\"selector\">\n                <RunInfo runs={this.state.wptRuns}/>\n                <BugComponentSelector onComponentChange={this.onComponentChange}\n                                      components={this.state.bugComponents}\n                                      value={this.state.currentBugComponent} />\n                <TestPaths\n                  paths={paths}\n                  selectedPaths={this.state.selectedPaths}\n                  onChange={this.onPathsChange} />\n              </section>\n              <section id=\"details\">\n                <Tabs>\n                  <ResultsView label=\"Firefox-only Failures\"\n                               failsIn={[\"firefox\"]}\n                               passesIn={[\"safari\", \"chrome\"]}\n                               runs={this.state.wptRuns}\n                               paths={Array.from(this.state.selectedPaths)}>\n                    <h2>Firefox-only Failures</h2>\n                    <p>Tests that pass in Chrome and Safari but fail in Firefox.</p>\n                  </ResultsView>\n                  <ResultsView label=\"All Firefox Failures\"\n                               failsIn={[\"firefox\"]}\n                               passesIn={[]}\n                               runs={this.state.wptRuns}\n                               paths={Array.from(this.state.selectedPaths)}>\n                    <h2>All Firefox Failures</h2>\n                    <p>Tests that fail in Firefox</p>\n                  </ResultsView>\n                <GeckoData label=\"Gecko Data\"\n                           data={this.filterGeckoMetadata()}\n                           paths={Array.from(this.state.selectedPaths)}>\n                  <h2>Gecko metadata</h2>\n                  <p>Gecko metadata in <code>testing/web-platform/meta</code></p>\n                </GeckoData>\n                </Tabs>\n              </section>\n            </div>\n        );\n    }\n}\n\nclass RunInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let shortRev = this.props.runs[0].revision;\n        let longRev = this.props.runs[0].full_revision_hash;\n        let url = makeWptFyiUrl(\"\", {sha: longRev});\n        return (<dl>\n          <dt>wpt SHA1:</dt>\n          <dd><a href={url}>{shortRev}</a></dd>\n        </dl>);\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (event) => {\n        this.props.onComponentChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.components.map(component => <option value={component.toLowerCase()} key={component.toLowerCase()}>{component}</option>);\n        if (!this.props.value) {\n            return null;\n        }\n        return (<section>\n                  <label>Bug Component: </label>\n                  <select\n                    onChange={this.handleChange}\n                    value={this.props.value}>\n                    {selectItems}\n                  </select>\n                </section>\n               );\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return (<section>\n                  <h2>Test Paths</h2>\n                  <button\n                    onClick={this.onUpdateClick}\n                    disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                    Update\n                  </button>\n                  <ul id=\"test-paths\">\n                    {listItems}\n                  </ul>\n                </section>);\n    }\n}\n\nclass Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.path}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: [],\n        };\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.props.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.props.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let searchResp = await fetch(makeWptFyiUrl(\"api/search\", {}), {\n            method: \"POST\",\n            body: JSON.stringify(searchQuery),\n            headers:{\n                  'Content-Type': 'application/json'\n            }\n        });\n        let searchData = await searchResp.json();\n\n        return searchData;\n\n    }\n\n    render() {\n        if (!this.props.runs || !this.state.loaded) {\n            return (<div>\n                      {this.props.children}\n                      <p>Loading…</p>\n                    </div>);\n        }\n        if (this.state.results.results === null) {\n            return (<div>\n                      {this.props.children}\n                      <p>Load failed</p>\n                    </div>);\n        }\n        if (!this.state.results.results.length) {\n            return (<div>\n                      {this.props.children}\n                      <p>No results</p>\n                    </div>);\n        }\n        let testItems = this.state.results.results.map(result => (<TestItem\n                                                                  failsIn={this.props.failsIn}\n                                                                  passesIn={this.props.passesIn}\n                                                                  runs={this.props.runs}\n                                                                  result={result}\n                                                                  key={result.test}/>));\n        testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n        return (<div>\n                  {this.props.children}\n                  <p>{this.state.results.results.length} top-level tests with\n                    &nbsp;{this.state.results.results\n                     .map(x => x.legacy_status[0].total)\n                     .reduce((x,y) => x+y, 0)} subtests</p>\n                  <ul>{testItems}</ul>\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({});\n    }\n\n    async componentDidUpdate(prevProps) {\n        await this.fetchIfPossible(prevProps);\n    }\n\n    async fetchIfPossible(prevProps) {\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loaded &&\n            arraysEqual(this.props.paths, prevProps.paths) &&\n            arraysEqual(this.props.failsIn, prevProps.failsIn) &&\n            arraysEqual(this.props.passesIn, prevProps.passesIn)) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loaded: true});\n            return;\n        }\n        let results = await this.fetchResults();\n        this.setState({results, loaded: true});\n    }\n}\n\nclass TestItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        // TODO: Difference between test path and file path\n        let testUrl = `http://w3c-test.org${this.props.result.test}`;\n        let resultUrl = makeWptFyiUrl(`results/${this.props.result.test}`);\n        let metaUrl = `http://searchfox.org/mozilla-central/source/testing/web-platform/meta${this.props.result.test}.ini`;\n        return (\n            <li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n              <span onClick={this.handleClick}>\n                {this.state.showDetails ? \"\\u25BC\" : \"\\u25B6\"}\n                <code>{this.props.result.test}</code>\n              </span>\n              [<a href={testUrl}>test</a>]\n              [<a href={resultUrl}>{this.props.result.legacy_status[0].total} subtests</a>]\n              [<a href={metaUrl}>gecko metadata</a>]\n              {this.state.showDetails ? (<div className=\"tree-row\">\n                                           <TestDetails\n                                             runs={this.props.runs}\n                                             visible={this.state.showDetails}\n                                             test={this.props.result.test}\n                                             passesIn={this.props.passesIn}\n                                             failsIn={this.props.failsIn}/>\n                                         </div>) : \"\"}\n            </li>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let browser of results.keys()) {\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async componentDidMount() {\n        let resultData = new Map();\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            resultData.set(browser, fetch(url).then(resp => resp.json()));\n        }\n        await Promise.all(Array.from(resultData.values()));\n        for (let [browser, promise] of resultData) {\n            resultData.set(browser, await promise);\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n    }\n\n    render() {\n        if (!this.props.visible) {\n            return null;\n        }\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}/>));\n        return (<table className=\"results\">\n                  <thead>\n                    <tr>\n                      <th></th>\n                      {headerRow}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {resultRows}\n                  </tbody>\n                </table>);\n    }\n}\n\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = new Map();\n        let lsan = new Map();\n        let crashes = new Map();\n\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            if (dirData.disabled) {\n                disabled.set(dir, dirData.disabled);\n            }\n            if (dirData['lsan-allowed']) {\n                lsan.set(dir, dirData['lsanAllowed']);\n            }\n            if (dirData.expected_CRASH) {\n                crashes.set(dir, dirData.expected_CRASH.map(cond => [cond, null]));\n            }\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                if (testData.disabled) {\n                    disabled.set(testKey, testData.disabled);\n                }\n                if (testData.expected_CRASH) {\n                    crashes.set(testKey, testData.expected_CRASH.map(cond => [cond, null]));\n                }\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    if (subtestData.disabled) {\n                        disabled.set(subtestKey, subtestData.disabled);\n                    }\n                    if (subtestData.expected_CRASH) {\n                        crashes.set(subtestKey, subtestData.expected_CRASH.map(cond => [cond, null]));\n                    }\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        console.log(this.props.data);\n        let content;\n        if (this.props.data === null) {\n            content = <p>Loading</p>;\n        } else {\n            content = [];\n            let byType = this.groupData();\n            console.log(byType);\n            if (byType.crashes) {\n                let items = [];\n                for (let [test, values] of byType.crashes) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 test={test}\n                                 values={values}\n                                 render={value => null}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"crashes\">\n                                   <h2>Crashes</h2>\n                                   <p>{items.length} tests crash in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.disabled) {\n                let items = [];\n                for (let [test, values] of byType.disabled) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 test={test}\n                                 values={values}\n                                 render={value => <MaybeBugLink value={value} />}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"disabled\">\n                                   <h2>Disabled</h2>\n                                   <p>{items.length} tests are disabled in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.lsan) {\n                let items = [];\n                for (let [test, values] of byType.lsan) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 test={test}\n                                 values={values}\n                                 render={value => <LsanListValue value={value}/>} />);\n                }\n                if (items.length) {\n                    content.push(<section key=\"lsan\">\n                                   <h2>LSAN Failures</h2>\n                                   <p>{items.length} directories have LSAN failures</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            return (<section>\n                      {this.props.children}\n                      {content.length ? content : <p>No metadata available</p>}\n                    </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <p>None</p>\n                </section>);\n    }\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}\n                          className=\"tree-row\">\n                          {conditionStr}{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<li\n                  key={this.props.test}>\n                  {this.props.test}\n                  {valueList}\n                </li>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}>x</li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}