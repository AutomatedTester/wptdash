{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["reversed","iterMapSorted","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","Set","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","map","cmp","keys","_i","key","_context2","from","sort","get","_marked2","makeWptFyiUrl","path","params","arguments","url","URL","concat","defaults","_i2","_ref3","_ref2","Object","slicedToArray","searchParams","append","_arr","_loop","_i3","forEach","x","urlParams","UrlParams","classCallCheck","window","location","history","replaceState","document","title","href","name","set","_update","delete","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","state","bugComponentsMap","setState","currentBugComponent","onPathsChange","pathsArray","join","bugComponents","Map","wptRuns","geckoMetadata","indexName","artifactName","fetch","taskResp","json","taskData","taskId","taskStatusResp","taskStatus","status","runs","run","runId","artifactsResp","artifacts","artifactData","find","artifact","endsWith","artifactResp","loadTaskClusterData","componentData","processComponentData","components","componentsMap","push","bugComponent","urlPaths","split","filter","runsUrl","aligned","runsResp","runsJson","redirect","dataResp","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","loadWptRunData","geckoMetadataPromise","loadGeckoMetadata","Promise","all","makeRe","pathPrefixes","RegExp","pathRe","slice","notPaths","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","values","test","notPathRe","data","allMetadata","_arr2","_i4","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","pop","_stack$pop2","basePath","obj","found","_arr3","_i5","filename","exec","relPath","react_default","createElement","id","App_RunInfo","App_BugComponentSelector","App_TestPaths","onChange","App_Tabs","App_ResultsView","label","failsIn","passesIn","App_GeckoData","filterGeckoMetadata","Component","RunInfo","shortRev","revision","sha","full_revision_hash","BugComponentSelector","handleChange","event","_this2","target","selectItems","TestPaths","_this3","onCheckboxChange","checked","add","onUpdateClick","prevProps","_this4","listItems","App_Checkbox","onClick","disabled","Checkbox","_this5","type","ResultsView","_this6","loaded","results","query","run_ids","item","and","topAndClause","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","browser","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","not","browser_name","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","orClause","or","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","pattern","searchQuery","buildQuery","method","body","JSON","stringify","headers","Content-Type","searchResp","searchData","_this7","children","testItems","result","App_TestItem","legacy_status","total","reduce","y","fetchIfPossible","fetchResults","TreeRow","_this8","handleClick","showDetails","className","rowTitle","rowExtra","TestItem","testUrl","resultUrl","metaUrl","App_TreeRow","App_TestDetails","TestDetails","_this9","_this10","resultBySubtest","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_ref8","_ref5","browserResults","message","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","subtests","subtest","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","resultByBrowser","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","filteredResultBySubtest","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_loop2","_ref6","_ref7","_iterator10","rv","resultData","_iterator13","_iteratorNormalCompletion13","_step13","summaryUrl","results_url","parts","then","resp","promise","filteredResults","processResultData","_this11","headerRow","resultRows","_ref12","_ref13","App_ResultRow","ResultRow","_this12","cells","App_ResultCell","ResultCell","GeckoData","lsan","crashes","_arr4","entries","_i6","_ref16","_ref15","dir","dirData","expected_CRASH","cond","_tests","_arr5","_i7","_ref19","_ref18","testData","testKey","_subtests","_arr6","_i8","_ref22","_ref21","subtestData","subtestKey","content","console","log","byType","groupData","items","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_ref25","_ref24","App_GeckoMetadataLine","render","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_ref28","_ref27","App_MaybeBugLink","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_ref31","_ref30","App_LsanListValue","GeckoMetadataLine","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_ref34","_ref33","condition","conditionStr","valueList","MaybeBugLink","_arr7","_i9","match","LsanListValue","frames","Tabs","_this13","handleClickTab","activeTab","_this14","tabItems","child","App_Tab","active","activeTabContent","Tab","_this15","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8SAUUA,eAiCAC,GAvCJC,EAAkB,wCAElBC,EAAe,0BAEfC,EAAe,IAAIC,IAAI,CAAC,OAAQ,OAEtC,SAAUL,EAASM,GAAnB,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACQN,EAAQD,EAAMQ,OADtB,YAEWP,EAAQ,GAFnB,CAAAI,EAAAE,KAAA,QAIQ,OADAN,IAHRI,EAAAE,KAAA,EAIcP,EAAMC,GAJpB,OAAAI,EAAAE,KAAA,gCAAAF,EAAAI,SAAAC,EAAAC,MAQA,SAASC,EAAYT,EAAGU,GACpB,OAAIV,IAAMU,MAGLC,MAAMC,QAAQZ,KAAOW,MAAMC,QAAQF,MAGpCV,EAAEK,SAAWK,EAAEL,QAGZL,EAAEa,MAAM,SAACC,EAASC,GAAV,OAAgBD,IAAYJ,EAAEK,MAGjD,SAASC,EAAUhB,EAAGU,GAClB,GAAIV,EAAEiB,OAASP,EAAEO,KACb,OAAO,EAFU,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAIrB,QAAAC,EAAAC,EAAgBvB,EAAhBwB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAnB,QAAAsB,MAAAR,GAAA,EAAmB,KAAXS,EAAWL,EAAAM,MACf,IAAKlB,EAAEmB,IAAIF,GACP,OAAO,GANM,MAAAG,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GASrB,OAAO,EAGX,SAAU5B,EAAcwC,EAAKC,GAA7B,IAAAC,EAAAC,EAAAC,EAAA,OAAArC,EAAAC,EAAAC,KAAA,SAAAoC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,QACQ8B,EAAOvB,MAAM2B,KAAKN,EAAIE,SACrBK,OAFTJ,EAAA,cAAAA,EAGoBD,EAHpB7B,QAAA,CAAAgC,EAAAjC,KAAA,SAIQ,OADKgC,EAAOF,EAHpBC,GAAAE,EAAAjC,KAAA,EAIc,CAACgC,EAAKJ,EAAIQ,IAAIJ,IAJ5B,OAAAD,IAAAE,EAAAjC,KAAA,iCAAAiC,EAAA/B,SAAAmC,EAAAjC,MAQA,SAASkC,EAAcC,GAMnB,IANoC,IAAXC,EAAWC,UAAAxC,OAAA,QAAAgB,IAAAwB,UAAA,GAAAA,UAAA,GAAJ,GAC5BC,EAAM,IAAIC,IAAJ,GAAAC,OAAWtD,EAAX,KAAAsD,OAA2BL,IACjCM,EAAW,CAAC,CAAC,QAAS,UACV,CAAC,UAAW,wBACZ,CAAC,UAAW,yBACZ,CAAC,UAAW,yBAC5BC,EAAA,EAAAA,EAAyBD,EAAzB5C,OAAA6C,IAAmC,KAAAC,EAAVF,EAAUC,GAAAE,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAAzBf,EAAyBgB,EAAA,GAApBxB,EAAoBwB,EAAA,GAC/BN,EAAIS,aAAaC,OAAOpB,EAAKR,GAEjC,IAToC,IAAA6B,EASpBJ,OAAOnB,KAAKU,GATQc,EAAA,WAS/B,IAAItB,EAAGqB,EAAAE,GACJ/B,EAAQgB,EAAOR,GACfzB,MAAMC,QAAQgB,GACdA,EAAMgC,QAAQ,SAAAC,GAAC,OAAIf,EAAIS,aAAaC,OAAOpB,EAAKyB,KAEhDf,EAAIS,aAAaC,OAAOpB,EAAKR,IALrC+B,EAAA,EAAAA,EAAAF,EAAApD,OAAAsD,IAAqCD,IAQrC,OAAOZ,MAqCLgB,EAAY,eAjCd,SAAAC,IAAeV,OAAAW,EAAA,EAAAX,CAAA7C,KAAAuD,GACXvD,KAAKsC,IAAM,IAAIC,IAAIkB,OAAOC,UAC1B1D,KAAKoC,OAASpC,KAAKsC,IAAIS,mEAIvBU,OAAOE,QAAQC,aAAa,GAAIC,SAASC,MAAO9D,KAAKsC,IAAIyB,kCAGzDC,GACA,OAAOhE,KAAKoC,OAAOJ,IAAIgC,+BAGvBA,GACA,OAAOhE,KAAKoC,OAAOf,IAAI2C,+BAGvBA,EAAM5C,GACNpB,KAAKoC,OAAO6B,IAAID,EAAM5C,GACtBpB,KAAKkE,yCAGFF,GACHhE,KAAKoC,OAAO+B,OAAOH,GACnBhE,KAAKkE,yCAGFF,EAAM5C,GACTpB,KAAKoC,OAAOY,OAAOgB,EAAM5C,GACzBpB,KAAKkE,oBAMPE,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAzB,OAAAW,EAAA,EAAAX,CAAA7C,KAAAoE,IACfE,EAAAzB,OAAA0B,EAAA,EAAA1B,CAAA7C,KAAA6C,OAAA2B,EAAA,EAAA3B,CAAAuB,GAAAK,KAAAzE,KAAMqE,KA8KVK,kBAAoB,SAACC,GACjB,IAAIC,EAAqBD,EAAUE,cAC/BC,EAAgB,IAAI1F,IAAIkF,EAAKS,MAAMC,iBAAiBhD,IAAI4C,IAC5DtB,EAAUW,IAAI,eAAgBU,GAC9BrB,EAAUa,OAAO,SACjBG,EAAKW,SAAS,CAACC,oBAAqBN,EAAoBE,mBApLzCR,EAuLnBa,cAAgB,SAACL,GACb,IAAIM,EAAajF,MAAM2B,KAAKgD,GAC5BM,EAAWrD,OACN9B,EAAYmF,EAAYd,EAAKS,MAAMC,iBAAiBhD,IAAIsC,EAAKS,MAAMG,sBAGpE5B,EAAUa,OAAO,SAFjBb,EAAUW,IAAI,QAASmB,EAAWC,KAAK,MAI3Cf,EAAKW,SAAS,CAACH,mBA7LfR,EAAKS,MAAQ,CACTO,cAAe,GACfN,iBAAkB,IAAIO,IACtBL,oBAAqB,KACrBJ,cAAe,IAAI1F,IACnBoG,QAAS,KACTC,cAAe,IARJnB,2HAYOoB,EAAWC,uHACZC,MAAK,GAAApD,OAtHV,wCAsHU,KAAAA,OAAuBkD,kBAA7CG,kBACiBA,EAASC,qBAA1BC,SACAC,EAASD,EAASC,gBACKJ,MAAK,GAAApD,OAAIvD,EAAJ,KAAAuD,OAAuBwD,EAAvB,0BAA5BC,mBACmBA,EAAeH,eAAlCI,wCAEYnH,EAASmH,EAAWC,OAAOC,4EACrB,eADbC,WACGtB,8BACJuB,EAAQD,EAAIC,2TAIMV,MAAK,GAAApD,OAAIvD,EAAJ,KAAAuD,OAAuBwD,EAAvB,UAAAxD,OAAsC8D,EAAtC,8BAA3BC,mBACkBA,EAAcT,sBAAhCU,SACAC,EAAeD,EAAUA,UAAUE,KAAK,SAAAC,GAAQ,OAAIA,EAAS3C,KAAK4C,SAASjB,eACtDC,MAAK,GAAApD,OAAIvD,EAAJ,KAAAuD,OAAuBwD,EAAvB,UAAAxD,OAAsC8D,EAAtC,eAAA9D,OAAyDiE,EAAazC,sBAAhG6C,2BACGA,EAAaf,uUAKM9F,KAAK8G,oBAAoB,8DACA,qCAD/CC,WAG8B/G,KAAKgH,qBAAqBD,sBAAvDE,OAAYC,QACjBD,EAAa9G,MAAM2B,KAAKmF,GAAYlF,QACzBoF,KAAK,OAEhBnH,KAAKiF,SAAS,CACVD,iBAAoBkC,EACpB5B,cAAiB2B,MAKjB/B,EAAsBlF,KAAK+E,MAAMG,sBAET5B,EAAUjC,IAAI,kBAClC+F,EAAe9D,EAAUtB,IAAI,gBAC7BkF,EAAc7F,IAAI+F,KAClBlC,EAAsBkC,IAGzBlC,IACDA,EAAsB+B,EAAW,GAAGpC,eAGpCC,EAAgB,IAAI1F,IAAI8H,EAAclF,IAAIkD,IAC1C5B,EAAUjC,IAAI,WACVgG,EAAW,IAAIjI,IAAIkE,EAAUtB,IAAI,SAASsF,MAAM,MACpDxC,EAAgB,IAAI1F,IAAIe,MAAM2B,KAAKgD,GAAeyC,OAAO,SAAAlE,GAAC,OAAIgE,EAAShG,IAAIgC,OAE/ErD,KAAKiF,SAAS,CAACH,gBAAeI,6RAI1BsC,EAAUtF,EAAc,WAAY,CAACuF,QAAS,cAC7B7B,MAAM4B,iBAAvBE,kBAEiBA,EAAS5B,cAA1B6B,SAEJ3H,KAAKiF,SAAS,CAACO,QAASmC,kRAMH/B,MAAK,oGACA,CAACgC,SAAU,yBADjCC,kBAEiBA,EAAS/B,cAA1BgC,SACJ9H,KAAKiF,SAAS,CAACQ,cAAeqC,2QAI1BC,EAAsB/H,KAAKgI,uBAC3BC,EAAoBjI,KAAKkI,iBACzBC,EAAuBnI,KAAKoI,6BAE1BC,QAAQC,IAAI,CAACP,EAAqBE,EAAmBE,oJAI3D,IAAKnI,KAAK+E,MAAMD,cAAcrE,OAASoC,OAAOnB,KAAK1B,KAAK+E,MAAMU,eAAe5F,OACzE,OAAO,KAEX,SAAS0I,EAAOC,GACZ,OAAKA,EAAa3I,OAGX,IAAI4I,OAAJ,OAAAjG,OAAkBgG,EAAanD,KAAK,KAApC,aAFI,KAIf,IAAIqD,EAASH,EAAOpI,MAAM2B,KAAK9B,KAAK+E,MAAMD,eAAetD,IAAI,SAAA6B,GAAC,OAAIA,EAAEsF,MAAM,MAEtEC,EAAW,GAZGC,GAAA,EAAAC,GAAA,EAAAC,OAAAlI,EAAA,IAalB,QAAAmI,EAAAC,EAAiBjJ,KAAK+E,MAAMC,iBAAiBkE,SAA7ClI,OAAAC,cAAA4H,GAAAG,EAAAC,EAAArJ,QAAAsB,MAAA2H,GAAA,EAAuD,KAA9C1G,EAA8C6G,EAAA5H,OAC9CpB,KAAK+E,MAAMD,cAAczD,IAAIc,IAC9BuG,EAAOS,KAAKhH,EAAKwG,MAAM,KACvBC,EAASzB,KAAKhF,IAhBJ,MAAAb,GAAAwH,GAAA,EAAAC,EAAAzH,EAAA,YAAAuH,GAAA,MAAAI,EAAA1H,QAAA0H,EAAA1H,SAAA,WAAAuH,EAAA,MAAAC,GAsBlB,IAHA,IAAIK,EAAYb,EAAOK,GACnBS,EAAO,GACPC,EAActJ,KAAK+E,MAAMU,cArBX8D,EAsBF1G,OAAOnB,KAAK4H,GAA5BE,EAAA,EAAAA,EAAAD,EAAA1J,OAAA2J,IAA0C,CAArC,IAAI5H,EAAG2H,EAAAC,IACJd,EAAOS,KAAKvH,IAAuB,OAAdwH,GAAuBA,EAAUD,KAAKvH,KAC3DyH,EAAKzH,GAAO0H,EAAY1H,IAGhC,OAAOyH,+CAGUtC,GACjB,IAAIG,EAAgBH,EAAcE,WAC9BwC,EAAQ1C,EAAc0C,MACtBC,EAAkB,IAAInE,IACtBoE,EAAkB,IAAIpE,IACtBqE,EAAU,6BACVC,EAAQ,CAAC,CAACD,EAASH,EAAMK,QAAQ,gBAAgBC,QACjDC,EAAa,gBACb/C,EAAa,GAIjB,IAFA0C,EAAgB1F,IAAI,MAAO,IAEpB4F,EAAMhK,QAGT,IAHiB,IAAAoK,EACKJ,EAAMK,MADXC,EAAAtH,OAAAC,EAAA,EAAAD,CAAAoH,EAAA,GACZG,EADYD,EAAA,GACFE,EADEF,EAAA,GAEbG,GAAQ,EAFKC,EAGI1H,OAAOnB,KAAK2I,GAAjCG,EAAA,EAAAA,EAAAD,EAAA1K,OAAA2K,IAAuC,CAAlC,IAAIC,EAAQF,EAAAC,GACTpJ,EAAQiJ,EAAII,GAChB,GAAqB,kBAAVrJ,EAAoB,CAC3B,IAAIe,EAAI,GAAAK,OAAM4H,EAAN,KAAA5H,OAAkBiI,GAC1BZ,EAAM1C,KAAK,CAAChF,EAAMf,QACf,CACH,GAAIkJ,GAASF,IAAaR,EACtB,SAKJ,IAHA,IAAIzH,EAAOiI,EACPzF,EAAYuC,EAAc9F,GAAOiE,KAAK,MACtCT,EAAqBD,EAAUE,cAC5B1C,IAASyH,GAAS,CACrB,GAAIF,EAAgBrI,IAAIc,IAASuH,EAAgB1H,IAAIG,KAAUyC,EAAoB,CAC/E0F,GAAQ,EACR,MAEJnI,EAAO6H,EAAWU,KAAKvI,GAAM,GAEjC,IAAKmI,EAAO,CACRZ,EAAgBzF,IAAImG,EAAUxF,GACzB+E,EAAgBtI,IAAIuD,KACrB+E,EAAgB1F,IAAIW,EAAoB,IACxCqC,EAAWE,KAAKxC,IAEpB,IAAIgG,EAAUP,EAASzB,MAAMiB,EAAQ/J,QACrC8J,EAAgB3H,IAAI4C,GAAoBuC,KAAKwD,GAC7ChB,EAAgB3H,IAAI,OAAOmF,KAAKwD,GAChCL,GAAQ,IAKxB,MAAO,CAACrD,EAAY0C,oCAuBpB,IAAIF,EAAQzJ,KAAK+E,MAAMC,iBAAiBhD,IAAIhC,KAAK+E,MAAMG,qBACvD,OACI0F,EAAApL,EAAAqL,cAAA,OAAKC,GAAG,OACNF,EAAApL,EAAAqL,cAAA,cACED,EAAApL,EAAAqL,cAAA,oCAEFD,EAAApL,EAAAqL,cAAA,WAASC,GAAG,YACVF,EAAApL,EAAAqL,cAACE,EAAD,CAAS3E,KAAMpG,KAAK+E,MAAMS,UAC1BoF,EAAApL,EAAAqL,cAACG,EAAD,CAAsBtG,kBAAmB1E,KAAK0E,kBACxBuC,WAAYjH,KAAK+E,MAAMO,cACvBlE,MAAOpB,KAAK+E,MAAMG,sBACxC0F,EAAApL,EAAAqL,cAACI,EAAD,CACExB,MAAOA,EACP3E,cAAe9E,KAAK+E,MAAMD,cAC1BoG,SAAUlL,KAAKmF,iBAEnByF,EAAApL,EAAAqL,cAAA,WAASC,GAAG,WACVF,EAAApL,EAAAqL,cAACM,EAAD,KACEP,EAAApL,EAAAqL,cAACO,EAAD,CAAaC,MAAM,wBACNC,QAAS,CAAC,WACVC,SAAU,CAAC,SAAU,UACrBnF,KAAMpG,KAAK+E,MAAMS,QACjBiE,MAAOtJ,MAAM2B,KAAK9B,KAAK+E,MAAMD,gBACxC8F,EAAApL,EAAAqL,cAAA,mCACAD,EAAApL,EAAAqL,cAAA,uEAEFD,EAAApL,EAAAqL,cAACO,EAAD,CAAaC,MAAM,uBACNC,QAAS,CAAC,WACVC,SAAU,GACVnF,KAAMpG,KAAK+E,MAAMS,QACjBiE,MAAOtJ,MAAM2B,KAAK9B,KAAK+E,MAAMD,gBACxC8F,EAAApL,EAAAqL,cAAA,kCACAD,EAAApL,EAAAqL,cAAA,wCAEJD,EAAApL,EAAAqL,cAACW,EAAD,CAAWH,MAAM,aACNhC,KAAMrJ,KAAKyL,sBACXhC,MAAOtJ,MAAM2B,KAAK9B,KAAK+E,MAAMD,gBACtC8F,EAAApL,EAAAqL,cAAA,4BACAD,EAAApL,EAAAqL,cAAA,8BAAqBD,EAAApL,EAAAqL,cAAA,yCAArB,uCACAD,EAAApL,EAAAqL,cAAA,wEA3OAa,aAoPZC,mLAEE,IAAK3L,KAAKqE,MAAM+B,KACZ,OAAO,KAEX,IAAIwF,EAAW5L,KAAKqE,MAAM+B,KAAK,GAAGyF,SAE9BvJ,EAAMJ,EAAc,GAAI,CAAC4J,IADf9L,KAAKqE,MAAM+B,KAAK,GAAG2F,qBAEjC,OAAQnB,EAAApL,EAAAqL,cAAA,UACND,EAAApL,EAAAqL,cAAA,uBACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,KAAG9G,KAAMzB,GAAMsJ,YAVPF,aAehBM,6MACFC,aAAe,SAACC,GACZC,EAAK9H,MAAMK,kBAAkBwH,EAAME,OAAOhL,gFAI1C,IAAIiL,EAAcrM,KAAKqE,MAAM4C,WAAWzF,IAAI,SAAAmD,GAAS,OAAIiG,EAAApL,EAAAqL,cAAA,UAAQzJ,MAAOuD,EAAUE,cAAejD,IAAK+C,EAAUE,eAAgBF,KAChI,OAAK3E,KAAKqE,MAAMjD,MAGRwJ,EAAApL,EAAAqL,cAAA,eACED,EAAApL,EAAAqL,cAAA,gCACAD,EAAApL,EAAAqL,cAAA,UACEK,SAAUlL,KAAKiM,aACf7K,MAAOpB,KAAKqE,MAAMjD,OACjBiL,IAPF,YARgBX,aAsB7BY,cACF,SAAAA,EAAYjI,GAAO,IAAAkI,EAAA,OAAA1J,OAAAW,EAAA,EAAAX,CAAA7C,KAAAsM,IACfC,EAAA1J,OAAA0B,EAAA,EAAA1B,CAAA7C,KAAA6C,OAAA2B,EAAA,EAAA3B,CAAAyJ,GAAA7H,KAAAzE,KAAMqE,KAMVmI,iBAAmB,SAACrK,EAAMsK,GACtB,IAAIhD,EAAQ,IAAIrK,IAAImN,EAAKxH,MAAM0E,OAC3BgD,EACAhD,EAAMiD,IAAIvK,GAEVsH,EAAMtF,OAAOhC,GAEjBoK,EAAKtH,SAAS,CAACwE,WAdA8C,EAiBnBI,cAAgB,WACZJ,EAAKlI,MAAM6G,SAASqB,EAAKxH,MAAM0E,QAhB/B8C,EAAKxH,MAAQ,CACT0E,MAAO,IAAIrK,IAAImN,EAAKlI,MAAMoF,QAHf8C,kFAqBAK,GACXA,EAAU9H,gBAAkB9E,KAAKqE,MAAMS,eACvC9E,KAAKiF,SAAS,CAACwE,MAAO,IAAIrK,IAAIY,KAAKqE,MAAMS,kDAIxC,IAAA+H,EAAA7M,KACL,IAAKA,KAAKqE,MAAMoF,MACZ,OAAO,KAEX,IAAIqD,EAAY9M,KAAKqE,MAAMoF,MAAM1H,OAAOP,IAAI,SAAAW,GAAI,OAC5CyI,EAAApL,EAAAqL,cAAA,MAAIjJ,IAAKO,GACPyI,EAAApL,EAAAqL,cAACkC,EAAD,CACEN,QAASI,EAAKxI,MAAMS,cAAczD,IAAIc,GACtCf,MAAOe,EACPqK,iBAAkBK,EAAKL,mBACxBrK,KAEP,OAAQyI,EAAApL,EAAAqL,cAAA,eACED,EAAApL,EAAAqL,cAAA,wBACAD,EAAApL,EAAAqL,cAAA,UACEmC,QAAShN,KAAK2M,cACdM,SAAUzM,EAAUR,KAAK+E,MAAM0E,MAAOzJ,KAAKqE,MAAMS,gBAFnD,UAKA8F,EAAApL,EAAAqL,cAAA,MAAIC,GAAG,cACJgC,WAhDGpB,aAsDlBwB,cACF,SAAAA,EAAY7I,GAAO,IAAA8I,EAAA,OAAAtK,OAAAW,EAAA,EAAAX,CAAA7C,KAAAkN,IACfC,EAAAtK,OAAA0B,EAAA,EAAA1B,CAAA7C,KAAA6C,OAAA2B,EAAA,EAAA3B,CAAAqK,GAAAzI,KAAAzE,KAAMqE,KAMV4H,aAAe,SAACC,GACZiB,EAAKlI,SAAS,CAACwH,UAASP,EAAME,OAAOK,UACrCU,EAAK9I,MAAMmI,iBAAiBW,EAAK9I,MAAMjD,MAAO8K,EAAME,OAAOK,UAP3DU,EAAKpI,MAAQ,CACT0H,QAASU,EAAK9I,MAAMoI,SAHTU,wEAaf,OAAQvC,EAAApL,EAAAqL,cAAA,SACE7G,KAAMhE,KAAKqE,MAAMlC,KACjBiL,KAAK,WACLX,QAASzM,KAAK+E,MAAM0H,QACpBvB,SAAUlL,KAAKiM,sBAlBVP,aAsBjB2B,cACF,SAAAA,EAAYhJ,GAAO,IAAAiJ,EAAA,OAAAzK,OAAAW,EAAA,EAAAX,CAAA7C,KAAAqN,IACfC,EAAAzK,OAAA0B,EAAA,EAAA1B,CAAA7C,KAAA6C,OAAA2B,EAAA,EAAA3B,CAAAwK,GAAA5I,KAAAzE,KAAMqE,KACDU,MAAQ,CACTwI,QAAQ,EACRC,QAAS,IAJEF,4EASf,IAAIG,EAAQ,CACRC,QAAS1N,KAAKqE,MAAM+B,KAAK5E,IAAI,SAAAmM,GAAI,OAAIA,EAAK7C,KAC1C2C,MAAO,CACHG,IAAK,KAGTC,EAAeJ,EAAMA,MAAMG,IAPtBE,GAAA,EAAAC,GAAA,EAAAC,OAAAnN,EAAA,IAST,QAAAoN,EAAAC,EAAoBlO,KAAKqE,MAAMiH,QAA/BtK,OAAAC,cAAA6M,GAAAG,EAAAC,EAAAtO,QAAAsB,MAAA4M,GAAA,EAAwC,KAA/BK,EAA+BF,EAAA7M,MAAAgN,GAAA,EAAAC,GAAA,EAAAC,OAAAzN,EAAA,IACpC,QAAA0N,EAAAC,EAAmBrP,EAAnB6B,OAAAC,cAAAmN,GAAAG,EAAAC,EAAA5O,QAAAsB,MAAAkN,GAAA,EAAiC,KAAxBjI,EAAwBoI,EAAAnN,MAC7ByM,EAAa1G,KAAK,CAACsH,IAAM,CACrBC,aAAcP,EACdhI,OAAQA,MAJoB,MAAA7E,GAAA+M,GAAA,EAAAC,EAAAhN,EAAA,YAAA8M,GAAA,MAAAI,EAAAjN,QAAAiN,EAAAjN,SAAA,WAAA8M,EAAA,MAAAC,KAT/B,MAAAhN,GAAAyM,GAAA,EAAAC,EAAA1M,EAAA,YAAAwM,GAAA,MAAAI,EAAA3M,QAAA2M,EAAA3M,SAAA,WAAAwM,EAAA,MAAAC,GAAA,IAAAW,GAAA,EAAAC,GAAA,EAAAC,OAAAhO,EAAA,IAkBT,QAAAiO,EAAAC,EAAoB/O,KAAKqE,MAAMkH,SAA/BvK,OAAAC,cAAA0N,GAAAG,EAAAC,EAAAnP,QAAAsB,MAAAyN,GAAA,EAAyC,KAAhCR,EAAgCW,EAAA1N,MACjCgL,OAAM,EACV,GAAIjN,EAAasB,KAAO,EAAG,CACvB,IAAIuO,EAAW,CAACC,GAAI,IACpBpB,EAAa1G,KAAK6H,GAClB5C,EAAS4C,EAASC,QAElB7C,EAASyB,EAPwB,IAAAqB,GAAA,EAAAC,GAAA,EAAAC,OAAAvO,EAAA,IAUrC,QAAAwO,EAAAC,EAAmBnQ,EAAnB6B,OAAAC,cAAAiO,GAAAG,EAAAC,EAAA1P,QAAAsB,MAAAgO,GAAA,EAAiC,KAAxB/I,EAAwBkJ,EAAAjO,MAC7BgL,EAAOjF,KAAK,CACRuH,aAAcP,EACdhI,OAAQA,KAbqB,MAAA7E,GAAA6N,GAAA,EAAAC,EAAA9N,EAAA,YAAA4N,GAAA,MAAAI,EAAA/N,QAAA+N,EAAA/N,SAAA,WAAA4N,EAAA,MAAAC,KAlBhC,MAAA9N,GAAAsN,GAAA,EAAAC,EAAAvN,EAAA,YAAAqN,GAAA,MAAAI,EAAAxN,QAAAwN,EAAAxN,SAAA,WAAAqN,EAAA,MAAAC,GAyCT,OALI7O,KAAKqE,MAAMoF,MAAM5J,OAAS,EAC1BgO,EAAa1G,KAAK,CAAC8H,GAAMjP,KAAKqE,MAAMoF,MAAMjI,IAAI,SAAAW,GAAS,MAAO,CAACoN,QAASpN,OAExE0L,EAAa1G,KAAK,CAACoI,QAASvP,KAAKqE,MAAMoF,MAAM,KAE1CgE,kKAIH+B,EAAcxP,KAAKyP,sBAEA7J,MAAM1D,EAAc,aAAc,IAAK,CAC1DwN,OAAQ,OACRC,KAAMC,KAAKC,UAAUL,GACrBM,QAAQ,CACFC,eAAgB,oCAJtBC,kBAOmBA,EAAWlK,qBAA9BmK,2BAEGA,sIAIF,IAAAC,EAAAlQ,KACL,IAAKA,KAAKqE,MAAM+B,OAASpG,KAAK+E,MAAMwI,OAChC,OAAQ3C,EAAApL,EAAAqL,cAAA,WACG7K,KAAKqE,MAAM8L,SACZvF,EAAApL,EAAAqL,cAAA,2BAGd,GAAmC,OAA/B7K,KAAK+E,MAAMyI,QAAQA,QACnB,OAAQ5C,EAAApL,EAAAqL,cAAA,WACG7K,KAAKqE,MAAM8L,SACZvF,EAAApL,EAAAqL,cAAA,yBAGd,IAAK7K,KAAK+E,MAAMyI,QAAQA,QAAQ3N,OAC5B,OAAQ+K,EAAApL,EAAAqL,cAAA,WACG7K,KAAKqE,MAAM8L,SACZvF,EAAApL,EAAAqL,cAAA,wBAGd,IAAIuF,EAAYpQ,KAAK+E,MAAMyI,QAAQA,QAAQhM,IAAI,SAAA6O,GAAM,OAAKzF,EAAApL,EAAAqL,cAACyF,EAAD,CACAhF,QAAS4E,EAAK7L,MAAMiH,QACpBC,SAAU2E,EAAK7L,MAAMkH,SACrBnF,KAAM8J,EAAK7L,MAAM+B,KACjBiK,OAAQA,EACRzO,IAAKyO,EAAOlH,SAEtE,OADAiH,EAAUrO,KAAK,SAACvC,EAAEU,GAAH,OAAUV,EAAEoC,IAAM1B,EAAE0B,IAAM,EAAKpC,EAAEoC,MAAQ1B,EAAE0B,IAAM,GAAK,IAC7DgJ,EAAApL,EAAAqL,cAAA,WACG7K,KAAKqE,MAAM8L,SACZvF,EAAApL,EAAAqL,cAAA,SAAI7K,KAAK+E,MAAMyI,QAAQA,QAAQ3N,OAA/B,6BACSG,KAAK+E,MAAMyI,QAAQA,QACxBhM,IAAI,SAAA6B,GAAC,OAAIA,EAAEkN,cAAc,GAAGC,QAC5BC,OAAO,SAACpN,EAAEqN,GAAH,OAASrN,EAAEqN,GAAG,GAHzB,aAIA9F,EAAApL,EAAAqL,cAAA,UAAKuF,wKAKTpQ,KAAK2Q,gBAAgB,yLAGN/D,mFACf5M,KAAK2Q,gBAAgB/D,sLAGTA,4EACM,OAApB5M,KAAKqE,MAAM+B,yDAGVpG,KAAKqE,MAAMoF,4DAGZzJ,KAAK+E,MAAMwI,QACXtN,EAAYD,KAAKqE,MAAMoF,MAAOmD,EAAUnD,QACxCxJ,EAAYD,KAAKqE,MAAMiH,QAASsB,EAAUtB,UAC1CrL,EAAYD,KAAKqE,MAAMkH,SAAUqB,EAAUrB,+DAG1CvL,KAAKqE,MAAMoF,MAAM5J,8BAClBG,KAAKiF,SAAS,CAACuI,QAAS,CAACA,QAAS,IACnBD,QAAQ,+CAGPvN,KAAK4Q,uBAArBpD,SACJxN,KAAKiF,SAAS,CAACuI,UAASD,QAAQ,+GApId7B,aAwIpBmF,cACF,SAAAA,EAAYxM,GAAO,IAAAyM,EAAA,OAAAjO,OAAAW,EAAA,EAAAX,CAAA7C,KAAA6Q,IACfC,EAAAjO,OAAA0B,EAAA,EAAA1B,CAAA7C,KAAA6C,OAAA2B,EAAA,EAAA3B,CAAAgO,GAAApM,KAAAzE,KAAMqE,KAMV0M,YAAc,WACVD,EAAK7L,SAAS,CAAC+L,aAAcF,EAAK/L,MAAMiM,eANxCF,EAAK/L,MAAQ,CACTiM,aAAa,GAHFF,wEAYf,OAAQlG,EAAApL,EAAAqL,cAAA,MAAIoG,UAAW,YAAcjR,KAAK+E,MAAMiM,YAAc,qBAAuB,KAC3EpG,EAAApL,EAAAqL,cAAA,QAAMmC,QAAShN,KAAK+Q,aACjB/Q,KAAK+E,MAAMiM,YAAc,SAAW,SACpChR,KAAKqE,MAAM6M,UAEblR,KAAKqE,MAAM8M,SACXnR,KAAK+E,MAAMiM,YAAepG,EAAApL,EAAAqL,cAAA,OAAKoG,UAAU,YACZjR,KAAKqE,MAAM8L,UACJ,WArBjCzE,aA2BhB0F,mLAGE,IAAIC,EAAO,sBAAA7O,OAAyBxC,KAAKqE,MAAMgM,OAAOlH,MAClDmI,EAAYpP,EAAa,WAAAM,OAAYxC,KAAKqE,MAAMgM,OAAOlH,OACvDoI,EAAO,wEAAA/O,OAA2ExC,KAAKqE,MAAMgM,OAAOlH,KAA7F,QACPgI,EAAYvG,EAAApL,EAAAqL,cAAA,gBACED,EAAApL,EAAAqL,cAAA,KAAG9G,KAAMsN,GAAT,QADF,MAEEzG,EAAApL,EAAAqL,cAAA,KAAG9G,KAAMuN,GAAYtR,KAAKqE,MAAMgM,OAAOE,cAAc,GAAGC,MAAxD,aAFF,MAGE5F,EAAApL,EAAAqL,cAAA,KAAG9G,KAAMwN,GAAT,kBAHF,KAIhB,OACQ3G,EAAApL,EAAAqL,cAAC2G,EAAD,CAASN,SAAUtG,EAAApL,EAAAqL,cAAA,YAAO7K,KAAKqE,MAAMgM,OAAOlH,MAC1CgI,SAAUA,GACVvG,EAAApL,EAAAqL,cAAC4G,EAAD,CACErL,KAAMpG,KAAKqE,MAAM+B,KACjB+C,KAAMnJ,KAAKqE,MAAMgM,OAAOlH,KACxBoC,SAAUvL,KAAKqE,MAAMkH,SACrBD,QAAStL,KAAKqE,MAAMiH,kBAjBjBI,aAuBjBgG,cACF,SAAAA,EAAYrN,GAAO,IAAAsN,EAAA,OAAA9O,OAAAW,EAAA,EAAAX,CAAA7C,KAAA0R,IACfC,EAAA9O,OAAA0B,EAAA,EAAA1B,CAAA7C,KAAA6C,OAAA2B,EAAA,EAAA3B,CAAA6O,GAAAjN,KAAAzE,KAAMqE,KACDU,MAAQ,CACTwI,QAAQ,EACRC,QAAS,MAJEmE,iFAQDnE,GAAS,IAAAoE,EAAA5R,KACnB6R,EAAkB,IAAItM,IADHuM,GAAA,EAAAC,GAAA,EAAAC,OAAAnR,EAAA,IAEvB,QAAAoR,EAAAC,EAAsC1E,EAAtCxM,OAAAC,cAAA6Q,GAAAG,EAAAC,EAAAtS,QAAAsB,MAAA4Q,GAAA,EAA+C,KAAAK,EAAAF,EAAA7Q,MAAAgR,EAAAvP,OAAAC,EAAA,EAAAD,CAAAsP,EAAA,GAArChE,EAAqCiE,EAAA,GAA5BC,EAA4BD,EAAA,GACtCP,EAAgBxQ,IAAI,OACrBwQ,EAAgB5N,IAAI,KAAM,IAAIsB,KAElCsM,EAAgB7P,IAAI,MAAMiC,IAAIkK,EAAS,CAAChI,OAAQkM,EAAelM,OACvBmM,QAASD,EAAeC,UALrB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAA5R,EAAA,IAM3C,QAAA6R,EAAAC,EAAoBN,EAAeO,SAAnC5R,OAAAC,cAAAsR,GAAAG,EAAAC,EAAA/S,QAAAsB,MAAAqR,GAAA,EAA6C,KAApCM,EAAoCH,EAAAtR,MACpCyQ,EAAgBxQ,IAAIwR,EAAQ7O,OAC7B6N,EAAgB5N,IAAI4O,EAAQ7O,KAAM,IAAIuB,KAE1CsM,EAAgB7P,IAAI6Q,EAAQ7O,MAAMC,IAAIkK,EAAS,CAAChI,OAAQ0M,EAAQ1M,OAChBmM,QAASO,EAAQP,WAX1B,MAAAhR,GAAAkR,GAAA,EAAAC,EAAAnR,EAAA,YAAAiR,GAAA,MAAAI,EAAApR,QAAAoR,EAAApR,SAAA,WAAAiR,EAAA,MAAAC,KAFxB,MAAAnR,GAAAyQ,GAAA,EAAAC,EAAA1Q,EAAA,YAAAwQ,GAAA,MAAAI,EAAA3Q,QAAA2Q,EAAA3Q,SAAA,WAAAwQ,EAAA,MAAAC,GAAA,IAAAc,GAAA,EAAAC,GAAA,EAAAC,OAAAnS,EAAA,IAiBvB,QAAAoS,EAAAC,EAA4BrB,EAAgB3I,SAA5ClI,OAAAC,cAAA6R,GAAAG,EAAAC,EAAAtT,QAAAsB,MAAA4R,GAAA,EAAsD,KAA7CK,EAA6CF,EAAA7R,MAAAgS,GAAA,EAAAC,GAAA,EAAAC,OAAAzS,EAAA,IAClD,QAAA0S,EAAAC,EAAoBhG,EAAQ9L,OAA5BV,OAAAC,cAAAmS,GAAAG,EAAAC,EAAA5T,QAAAsB,MAAAkS,GAAA,EAAoC,KAA3BjF,EAA2BoF,EAAAnS,MAC3B+R,EAAgB9R,IAAI8M,IACrBgF,EAAgBlP,IAAIkK,EAAS,CAAChI,OAAQ,UACRmM,QAAS,QAJG,MAAAhR,GAAA+R,GAAA,EAAAC,EAAAhS,EAAA,YAAA8R,GAAA,MAAAI,EAAAjS,QAAAiS,EAAAjS,SAAA,WAAA8R,EAAA,MAAAC,KAjB/B,MAAAhS,GAAAyR,GAAA,EAAAC,EAAA1R,EAAA,YAAAwR,GAAA,MAAAI,EAAA3R,QAAA2R,EAAA3R,SAAA,WAAAwR,EAAA,MAAAC,GA0BvB,IAAIS,EAA0B,IAAIlO,IA1BXmO,GAAA,EAAAC,GAAA,EAAAC,OAAA/S,EAAA,IA4BvB,IA5BuB,IA4BvBgT,EA5BuBC,EAAA,eAAAC,EAAAF,EAAAzS,MA4BbyR,GA5BamB,EAAAnR,OAAAC,EAAA,EAAAD,CAAAkR,EAAA,OA4BJZ,EA5BIa,EAAA,GA6BfpC,EAAKvN,MAAMkH,SAASlL,MAAM,SAAA8N,GAAO,OAAIhP,EAAakC,IAAI8R,EAAgBnR,IAAImM,GAAShI,WACnFyL,EAAKvN,MAAMiH,QAAQjL,MAAM,SAAA8N,GAAO,OAAKhP,EAAakC,IAAI8R,EAAgBnR,IAAImM,GAAShI,WACnFsN,EAAwBxP,IAAI4O,EAASM,IAH7Cc,EAAuCpC,EAAvC7Q,OAAAC,cAAAyS,GAAAG,EAAAI,EAAArU,QAAAsB,MAAAwS,GAAA,EAAwD,KAAAM,EAAAF,KA5BjC,MAAAxS,GAAAqS,GAAA,EAAAC,EAAAtS,EAAA,YAAAoS,GAAA,MAAAO,EAAA1S,QAAA0S,EAAA1S,SAAA,WAAAoS,EAAA,MAAAC,GAmCvB,IAAIM,EAAK,GAMT,OALIT,EAAwBpS,IAAI,QAC5B6S,EAAG/M,KAAK,CAAC,KAAMsM,EAAwBzR,IAAI,QAC3CyR,EAAwBtP,OAAO,OAG5B+P,EAAG1R,OAAOrC,MAAM2B,KAAK2R,sMAK5B,IADIU,EAAa,IAAI5O,gCACrB6O,EAAgBpU,KAAKqE,MAAM+B,KAA3BpF,OAAAC,cAAAoT,GAAAC,EAAAF,EAAAxU,QAAAsB,MAAAmT,GAAA,EAAShO,EAAwBiO,EAAAlT,MACzB+M,EAAU9H,EAAIqI,aACd6F,EAAalO,EAAImO,aACjBC,EAAQF,EAAWjN,MAAM,MAEvB4C,MACF5H,EANyB,GAAAE,OAMhBiS,EAAMpP,KAAK,MANK7C,OAMExC,KAAKqE,MAAM8E,MAC1CgL,EAAWlQ,IAAIkK,EAASvI,MAAMtD,GAAKoS,KAAK,SAAAC,GAAI,OAAIA,EAAK7O,kQAEnDuC,QAAQC,IAAInI,MAAM2B,KAAKqS,EAAWjL,kDACTiL,yGAArBhG,OAASyG,YACfT,OAAehG,YAAeyG,2BAAnB3Q,wSAEX4Q,EAAkB7U,KAAK8U,kBAAkBX,GAC7CnU,KAAKiF,SAAS,CAACuI,QAASqH,EACTtH,QAAQ,4LAGlB,IAAAwH,EAAA/U,KACL,IAAKA,KAAK+E,MAAMwI,OACZ,OAAO3C,EAAApL,EAAAqL,cAAA,oBAEX,IAAImK,EAAYhV,KAAKqE,MAAM+B,KAAK5E,IAAI,SAAA6E,GAAG,OAAIuE,EAAApL,EAAAqL,cAAA,MAAIjJ,IAAKyE,EAAIqI,cAAerI,EAAIqI,gBACvEuG,EAAajV,KAAK+E,MAAMyI,QAAQhM,IAAI,SAAA0T,GAAA,IAAAC,EAAAtS,OAAAC,EAAA,EAAAD,CAAAqS,EAAA,GAAErC,EAAFsC,EAAA,GAAW3H,EAAX2H,EAAA,UAAyBvK,EAAApL,EAAAqL,cAACuK,EAAD,CACExT,IAAKiR,EACLzM,KAAM2O,EAAK1Q,MAAM+B,KACjByM,QAASA,EACTrF,QAASA,MAC5E,OAAQ5C,EAAApL,EAAAqL,cAAA,SAAOoG,UAAU,WACfrG,EAAApL,EAAAqL,cAAA,aACED,EAAApL,EAAAqL,cAAA,UACED,EAAApL,EAAAqL,cAAA,WACCmK,IAGLpK,EAAApL,EAAAqL,cAAA,aACGoK,WA3FKvJ,aAkGpB2J,mLACO,IAAAC,EAAAtV,KACDuV,EAAQvV,KAAKqE,MAAM+B,KAAK5E,IAAI,SAAA6E,GAC5B,IAAIgK,EAASiF,EAAKjR,MAAMmJ,QAAQxL,IAAIqE,EAAIqI,cACxC,OAAO9D,EAAApL,EAAAqL,cAAC2K,EAAD,CAAYnF,OAAQA,EAAQzO,IAAKyE,EAAIqI,iBAEhD,OAAQ9D,EAAApL,EAAAqL,cAAA,UACED,EAAApL,EAAAqL,cAAA,UAAK7K,KAAKqE,MAAMwO,QAAU7S,KAAKqE,MAAMwO,QAAU,YAC9C0C,UARK7J,aAalB+J,mLAEE,OAAQ7K,EAAApL,EAAAqL,cAAA,MACEoG,UAAS,iBAAAzO,OAAmBxC,KAAKqE,MAAMgM,OAAOlK,OAAOtB,eACrDf,MAAO9D,KAAKqE,MAAMgM,OAAOiC,SACxBtS,KAAKqE,MAAMgM,OAAOlK,eALZuF,aAUnBgK,sLAME,IAJA,IAAIzI,EAAW,IAAI1H,IACfoQ,EAAO,IAAIpQ,IACXqQ,EAAU,IAAIrQ,IAHVsQ,EAKmBhT,OAAOiT,QAAQ9V,KAAKqE,MAAMgF,MAArD0M,EAAA,EAAAA,EAAAF,EAAAhW,OAAAkW,IAA4D,KAAAC,EAAAH,EAAAE,GAAAE,EAAApT,OAAAC,EAAA,EAAAD,CAAAmT,EAAA,GAAlDE,EAAkDD,EAAA,GAA7CE,EAA6CF,EAAA,GAUxD,GATIE,EAAQlJ,UACRA,EAAShJ,IAAIiS,EAAKC,EAAQlJ,UAE1BkJ,EAAQ,iBACRR,EAAK1R,IAAIiS,EAAKC,EAAQ,iBAEtBA,EAAQC,gBACRR,EAAQ3R,IAAIiS,EAAKC,EAAQC,eAAe5U,IAAI,SAAA6U,GAAI,MAAI,CAACA,EAAM,SAE1DF,EAAQG,OAGb,IAbwD,IAAAC,EAa3B1T,OAAOiT,QAAQK,EAAQG,QAApDE,EAAA,EAAAA,EAAAD,EAAA1W,OAAA2W,IAA6D,KAAAC,EAAAF,EAAAC,GAAAE,EAAA7T,OAAAC,EAAA,EAAAD,CAAA4T,EAAA,GAAnDtN,EAAmDuN,EAAA,GAA7CC,EAA6CD,EAAA,GACrDE,EAAO,GAAApU,OAAM0T,EAAN,KAAA1T,OAAa2G,GAOxB,GANIwN,EAAS1J,UACTA,EAAShJ,IAAI2S,EAASD,EAAS1J,UAE/B0J,EAASP,gBACTR,EAAQ3R,IAAI2S,EAASD,EAASP,eAAe5U,IAAI,SAAA6U,GAAI,MAAI,CAACA,EAAM,SAE/DM,EAASE,UAGd,IAXyD,IAAAC,EAWtBjU,OAAOiT,QAAQa,EAASE,WAA3DE,EAAA,EAAAA,EAAAD,EAAAjX,OAAAkX,IAAuE,KAAAC,EAAAF,EAAAC,GAAAE,EAAApU,OAAAC,EAAA,EAAAD,CAAAmU,EAAA,GAA7DnE,EAA6DoE,EAAA,GAApDC,EAAoDD,EAAA,GAC/DE,EAAU,GAAA3U,OAAM0T,EAAN,KAAA1T,OAAa2G,EAAb,OAAA3G,OAAuBqQ,GACjCqE,EAAYjK,UACZA,EAAShJ,IAAIkT,EAAYD,EAAYjK,UAErCiK,EAAYd,gBACZR,EAAQ3R,IAAIkT,EAAYD,EAAYd,eAAe5U,IAAI,SAAA6U,GAAI,MAAI,CAACA,EAAM,WAKtF,MAAO,CAACpJ,WAAU0I,OAAMC,4CAKxB,IAAIwB,EACJ,GAFAC,QAAQC,IAAItX,KAAKqE,MAAMgF,MAEC,OAApBrJ,KAAKqE,MAAMgF,KAER,CACH+N,EAAU,GACV,IAAIG,EAASvX,KAAKwX,YAElB,GADAH,QAAQC,IAAIC,GACRA,EAAO3B,QAAS,CAChB,IAAI6B,EAAQ,GADIC,GAAA,EAAAC,GAAA,EAAAC,OAAA/W,EAAA,IAEhB,QAAAgX,EAAAC,EAA2B9Y,EAAcuY,EAAO3B,SAAhD5U,OAAAC,cAAAyW,GAAAG,EAAAC,EAAAlY,QAAAsB,MAAAwW,GAAA,EAA0D,KAAAK,EAAAF,EAAAzW,MAAA4W,EAAAnV,OAAAC,EAAA,EAAAD,CAAAkV,EAAA,GAAhD5O,EAAgD6O,EAAA,GAA1C9O,EAA0C8O,EAAA,GACtDP,EAAMtQ,KAAKyD,EAAApL,EAAAqL,cAACoN,EAAD,CACErW,IAAKuH,EACLA,KAAMA,EACND,OAAQA,EACRgP,OAAQ,SAAA9W,GAAK,OAAI,UAPlB,MAAAE,GAAAqW,GAAA,EAAAC,EAAAtW,EAAA,YAAAoW,GAAA,MAAAI,EAAAvW,QAAAuW,EAAAvW,SAAA,WAAAoW,EAAA,MAAAC,GASZH,EAAM5X,QACNuX,EAAQjQ,KAAKyD,EAAApL,EAAAqL,cAAA,WAASjJ,IAAI,WACXgJ,EAAApL,EAAAqL,cAAA,qBACAD,EAAApL,EAAAqL,cAAA,SAAI4M,EAAM5X,OAAV,uCACA+K,EAAApL,EAAAqL,cAAA,UAAK4M,KAI5B,GAAIF,EAAOtK,SAAU,CACjB,IAAIwK,EAAQ,GADKU,GAAA,EAAAC,GAAA,EAAAC,OAAAxX,EAAA,IAEjB,QAAAyX,EAAAC,EAA2BvZ,EAAcuY,EAAOtK,UAAhDjM,OAAAC,cAAAkX,GAAAG,EAAAC,EAAA3Y,QAAAsB,MAAAiX,GAAA,EAA2D,KAAAK,EAAAF,EAAAlX,MAAAqX,EAAA5V,OAAAC,EAAA,EAAAD,CAAA2V,EAAA,GAAjDrP,EAAiDsP,EAAA,GAA3CvP,EAA2CuP,EAAA,GACvDhB,EAAMtQ,KAAKyD,EAAApL,EAAAqL,cAACoN,EAAD,CACErW,IAAKuH,EACLA,KAAMA,EACND,OAAQA,EACRgP,OAAQ,SAAA9W,GAAK,OAAIwJ,EAAApL,EAAAqL,cAAC6N,EAAD,CAActX,MAAOA,SAPtC,MAAAE,GAAA8W,GAAA,EAAAC,EAAA/W,EAAA,YAAA6W,GAAA,MAAAI,EAAAhX,QAAAgX,EAAAhX,SAAA,WAAA6W,EAAA,MAAAC,GASbZ,EAAM5X,QACNuX,EAAQjQ,KAAKyD,EAAApL,EAAAqL,cAAA,WAASjJ,IAAI,YACXgJ,EAAApL,EAAAqL,cAAA,sBACAD,EAAApL,EAAAqL,cAAA,SAAI4M,EAAM5X,OAAV,8CACA+K,EAAApL,EAAAqL,cAAA,UAAK4M,KAI5B,GAAIF,EAAO5B,KAAM,CACb,IAAI8B,EAAQ,GADCkB,GAAA,EAAAC,GAAA,EAAAC,OAAAhY,EAAA,IAEb,QAAAiY,EAAAC,EAA2B/Z,EAAcuY,EAAO5B,MAAhD3U,OAAAC,cAAA0X,GAAAG,EAAAC,EAAAnZ,QAAAsB,MAAAyX,GAAA,EAAuD,KAAAK,EAAAF,EAAA1X,MAAA6X,EAAApW,OAAAC,EAAA,EAAAD,CAAAmW,EAAA,GAA7C7P,EAA6C8P,EAAA,GAAvC/P,EAAuC+P,EAAA,GACnDxB,EAAMtQ,KAAKyD,EAAApL,EAAAqL,cAACoN,EAAD,CACErW,IAAKuH,EACLA,KAAMA,EACND,OAAQA,EACRgP,OAAQ,SAAA9W,GAAK,OAAIwJ,EAAApL,EAAAqL,cAACqO,EAAD,CAAe9X,MAAOA,SAP3C,MAAAE,GAAAsX,GAAA,EAAAC,EAAAvX,EAAA,YAAAqX,GAAA,MAAAI,EAAAxX,QAAAwX,EAAAxX,SAAA,WAAAqX,EAAA,MAAAC,GASTpB,EAAM5X,QACNuX,EAAQjQ,KAAKyD,EAAApL,EAAAqL,cAAA,WAASjJ,IAAI,QACXgJ,EAAApL,EAAAqL,cAAA,2BACAD,EAAApL,EAAAqL,cAAA,SAAI4M,EAAM5X,OAAV,mCACA+K,EAAApL,EAAAqL,cAAA,UAAK4M,KAI5B,OAAQ7M,EAAApL,EAAAqL,cAAA,eACG7K,KAAKqE,MAAM8L,SACXiH,EAAQvX,OAASuX,EAAUxM,EAAApL,EAAAqL,cAAA,mCAG1C,OA7DIuM,EAAUxM,EAAApL,EAAAqL,cAAA,oBA6DND,EAAApL,EAAAqL,cAAA,eACED,EAAApL,EAAAqL,cAAA,4BACAD,EAAApL,EAAAqL,cAAA,yBA/GMa,aAoHlByN,mLAEE,IAAIjQ,EAAS,GADRkQ,GAAA,EAAAC,GAAA,EAAAC,OAAAzY,EAAA,IAEL,QAAA0Y,EAAAC,EAA+BxZ,KAAKqE,MAAM6E,OAA1ClI,OAAAC,cAAAmY,GAAAG,EAAAC,EAAA5Z,QAAAsB,MAAAkY,GAAA,EAAkD,KAAAK,EAAAF,EAAAnY,MAAAsY,EAAA7W,OAAAC,EAAA,EAAAD,CAAA4W,EAAA,GAAxCE,EAAwCD,EAAA,GAA7BtY,EAA6BsY,EAAA,GAC1CE,EAAeD,EAAS,MAAAnX,OAASmX,GAATnX,OAAqBpB,EAAQ,KAAO,KAAQ,GACxE8H,EAAO/B,KAAKyD,EAAApL,EAAAqL,cAAA,MACEjJ,IAAK+X,GAAwB,QAC7B/O,EAAApL,EAAAqL,cAAA,YAAO+O,GAAqBxY,EAAQpB,KAAKqE,MAAM6T,OAAO9W,GAAQ,QAN3E,MAAAE,GAAA+X,GAAA,EAAAC,EAAAhY,EAAA,YAAA8X,GAAA,MAAAI,EAAAjY,QAAAiY,EAAAjY,SAAA,WAAA8X,EAAA,MAAAC,GASL,IAAIO,EAAY,KAIhB,OAHI3Q,EAAOrJ,SACPga,EAAYjP,EAAApL,EAAAqL,cAAA,MAAIoG,UAAU,YAAY/H,IAElC0B,EAAApL,EAAAqL,cAAC2G,EAAD,CACEN,SAAUlR,KAAKqE,MAAM8E,KACrBgI,SAAU,MACT0I,UAjBanO,aAsB1BoO,mLAIE,IAFA,IADKC,EAGU,CAFG,6DACE,qBACpBC,EAAA,EAAAA,EAAAD,EAAAla,OAAAma,IAAyC,CAApC,IACGC,EADGF,EAAAC,GACQtP,KAAK1K,KAAKqE,MAAMjD,OAC/B,GAAc,OAAV6Y,EACA,OAAOrP,EAAApL,EAAAqL,cAAA,KAAG9G,KAAI,gDAAAvB,OAAkDyX,EAAM,KAA/D,OAA0EA,EAAM,IAG/F,OAAOja,KAAKqE,MAAMjD,aAVCsK,aAcrBwO,mLAEE,GAAI/Z,MAAMC,QAAQJ,KAAKqE,MAAMjD,OAAQ,CACjC,IAAI+Y,EAASna,KAAKqE,MAAMjD,MAAMI,IAAI,SAAA6B,GAAC,OAAIuH,EAAApL,EAAAqL,cAAA,MAAIjJ,IAAKyB,GAAGuH,EAAApL,EAAAqL,cAAA,YAAOxH,MAC1D,OAAQuH,EAAApL,EAAAqL,cAAA,UAAKsP,GAEjB,OAAOna,KAAKqE,MAAMjD,aANEsK,aAWtB0O,cACF,SAAAA,EAAY/V,GAAO,IAAAgW,EAAA,OAAAxX,OAAAW,EAAA,EAAAX,CAAA7C,KAAAoa,IACfC,EAAAxX,OAAA0B,EAAA,EAAA1B,CAAA7C,KAAA6C,OAAA2B,EAAA,EAAA3B,CAAAuX,GAAA3V,KAAAzE,KAAMqE,KAMViW,eAAiB,SAACjP,GACdgP,EAAKpV,SAAS,CAACsV,UAAWlP,IAC1B/H,EAAUW,IAAI,MAAOoH,IAPrBgP,EAAKtV,MAAQ,CACTwV,UAAWjX,EAAUtB,IAAI,QAAUqY,EAAKhW,MAAM8L,SAAS,GAAG9L,MAAMgH,OAHrDgP,wEAYV,IAAAG,EAAAxa,KACDya,EAAWza,KAAKqE,MAAM8L,SAAS3O,IAAI,SAAAkZ,GACnC,IAAIrP,EAAQqP,EAAMrW,MAAMgH,MACxB,OAAQT,EAAApL,EAAAqL,cAAC8P,EAAD,CACEC,OAAUJ,EAAKzV,MAAMwV,YAAclP,EACnCA,MAASA,EACTzJ,IAAOyJ,EACP2B,QAAWwN,EAAKF,mBAG1BO,EAAmB7a,KAAKqE,MAAM8L,SAASzJ,KAAK,SAAAgU,GAAK,OAAIA,EAAMrW,MAAMgH,QAAUmP,EAAKzV,MAAMwV,YAC1F,OAAQ3P,EAAApL,EAAAqL,cAAA,OAAKoG,UAAU,YACbrG,EAAApL,EAAAqL,cAAA,MAAIoG,UAAU,aACXwJ,GAEH7P,EAAApL,EAAAqL,cAAA,OAAKoG,UAAU,eACZ4J,WA7BFnP,aAmCboP,6MACF9N,QAAU,WACN+N,EAAK1W,MAAM2I,QAAQ+N,EAAK1W,MAAMgH,gFAI9B,OAAQT,EAAApL,EAAAqL,cAAA,MACEoG,UAAW,cAAgBjR,KAAKqE,MAAMuW,OAAS,aAAe,IAC9D5N,QAAShN,KAAKgN,SACbhN,KAAKqE,MAAMgH,cATZK,aAcHtH,IC38BK4W,QACW,cAA7BvX,OAAOC,SAASuX,UAEe,UAA7BxX,OAAOC,SAASuX,UAEhBxX,OAAOC,SAASuX,SAAShB,MACvB,2DCZNiB,IAAShD,OAAOtN,EAAApL,EAAAqL,cAACsQ,EAAD,MAAStX,SAASuX,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7G,KAAK,SAAA8G,GACjCA,EAAaC","file":"static/js/main.75d4de15.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://staging.wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nfunction* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nfunction arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nfunction setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    for (let [key, value] of defaults) {\n        url.searchParams.append(key, value);\n    }\n    for (let key of Object.keys(params)) {\n        let value = params[key];\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location)\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst urlParams = new UrlParams();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            wptRuns: null,\n            geckoMetadata: {}\n        };\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let taskResp = await fetch(`${TASK_INDEX_BASE}/${indexName}`);\n        let taskData = await taskResp.json();\n        let taskId = taskData.taskId;\n        let taskStatusResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/status`);\n        let taskStatus = await taskStatusResp.json();\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifactsResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`);\n        let artifacts = await artifactsResp.json();\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        let artifactResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`);\n        return artifactResp.json();\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let runsUrl = makeWptFyiUrl(\"api/runs\", {aligned: \"\"});\n        let runsResp = await fetch(runsUrl);\n\n        let runsJson = await runsResp.json();\n\n        this.setState({wptRuns: runsJson});\n    }\n\n    async loadGeckoMetadata() {\n//        let metadata = await this.loadTaskClusterData(\"index.gecko.v2.try.latest.source.source-wpt-metadata-summary\",\n//                                                      \"summary.json\");\n        let dataResp = await fetch(`https://queue.taskcluster.net/v1/task/Ik2tnR1KQzi26GfvTQ2WHw/runs/0/artifacts/public/summary.json`,\n                                  {redirect: \"follow\"});\n        let metadata = await dataResp.json();\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return null;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n        return data;\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        return (\n            <div id=\"app\">\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              <section id=\"selector\">\n                <RunInfo runs={this.state.wptRuns}/>\n                <BugComponentSelector onComponentChange={this.onComponentChange}\n                                      components={this.state.bugComponents}\n                                      value={this.state.currentBugComponent} />\n                <TestPaths\n                  paths={paths}\n                  selectedPaths={this.state.selectedPaths}\n                  onChange={this.onPathsChange} />\n              </section>\n              <section id=\"details\">\n                <Tabs>\n                  <ResultsView label=\"Firefox-only Failures\"\n                               failsIn={[\"firefox\"]}\n                               passesIn={[\"safari\", \"chrome\"]}\n                               runs={this.state.wptRuns}\n                               paths={Array.from(this.state.selectedPaths)}>\n                    <h2>Firefox-only Failures</h2>\n                    <p>Tests that pass in Chrome and Safari but fail in Firefox.</p>\n                  </ResultsView>\n                  <ResultsView label=\"All Firefox Failures\"\n                               failsIn={[\"firefox\"]}\n                               passesIn={[]}\n                               runs={this.state.wptRuns}\n                               paths={Array.from(this.state.selectedPaths)}>\n                    <h2>All Firefox Failures</h2>\n                    <p>Tests that fail in Firefox</p>\n                  </ResultsView>\n                <GeckoData label=\"Gecko Data\"\n                           data={this.filterGeckoMetadata()}\n                           paths={Array.from(this.state.selectedPaths)}>\n                  <h2>Gecko metadata</h2>\n                  <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                  <p>Note: this data is currently not kept up to date</p>\n                </GeckoData>\n                </Tabs>\n              </section>\n            </div>\n        );\n    }\n}\n\nclass RunInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let shortRev = this.props.runs[0].revision;\n        let longRev = this.props.runs[0].full_revision_hash;\n        let url = makeWptFyiUrl(\"\", {sha: longRev});\n        return (<dl>\n          <dt>wpt SHA1:</dt>\n          <dd><a href={url}>{shortRev}</a></dd>\n        </dl>);\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (event) => {\n        this.props.onComponentChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.components.map(component => <option value={component.toLowerCase()} key={component.toLowerCase()}>{component}</option>);\n        if (!this.props.value) {\n            return null;\n        }\n        return (<section>\n                  <label>Bug Component: </label>\n                  <select\n                    onChange={this.handleChange}\n                    value={this.props.value}>\n                    {selectItems}\n                  </select>\n                </section>\n               );\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return (<section>\n                  <h2>Test Paths</h2>\n                  <button\n                    onClick={this.onUpdateClick}\n                    disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                    Update\n                  </button>\n                  <ul id=\"test-paths\">\n                    {listItems}\n                  </ul>\n                </section>);\n    }\n}\n\nclass Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.path}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: [],\n        };\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.props.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.props.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let searchResp = await fetch(makeWptFyiUrl(\"api/search\", {}), {\n            method: \"POST\",\n            body: JSON.stringify(searchQuery),\n            headers:{\n                  'Content-Type': 'application/json'\n            }\n        });\n        let searchData = await searchResp.json();\n\n        return searchData;\n\n    }\n\n    render() {\n        if (!this.props.runs || !this.state.loaded) {\n            return (<div>\n                      {this.props.children}\n                      <p>Loading…</p>\n                    </div>);\n        }\n        if (this.state.results.results === null) {\n            return (<div>\n                      {this.props.children}\n                      <p>Load failed</p>\n                    </div>);\n        }\n        if (!this.state.results.results.length) {\n            return (<div>\n                      {this.props.children}\n                      <p>No results</p>\n                    </div>);\n        }\n        let testItems = this.state.results.results.map(result => (<TestItem\n                                                                  failsIn={this.props.failsIn}\n                                                                  passesIn={this.props.passesIn}\n                                                                  runs={this.props.runs}\n                                                                  result={result}\n                                                                  key={result.test}/>));\n        testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n        return (<div>\n                  {this.props.children}\n                  <p>{this.state.results.results.length} top-level tests with\n                    &nbsp;{this.state.results.results\n                     .map(x => x.legacy_status[0].total)\n                     .reduce((x,y) => x+y, 0)} subtests</p>\n                  <ul>{testItems}</ul>\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({});\n    }\n\n    async componentDidUpdate(prevProps) {\n        await this.fetchIfPossible(prevProps);\n    }\n\n    async fetchIfPossible(prevProps) {\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loaded &&\n            arraysEqual(this.props.paths, prevProps.paths) &&\n            arraysEqual(this.props.failsIn, prevProps.failsIn) &&\n            arraysEqual(this.props.passesIn, prevProps.passesIn)) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loaded: true});\n            return;\n        }\n        let results = await this.fetchResults();\n        this.setState({results, loaded: true});\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC\" : \"\\u25B6\"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let testUrl = `http://w3c-test.org${this.props.result.test}`;\n        let resultUrl = makeWptFyiUrl(`results/${this.props.result.test}`);\n        let metaUrl = `http://searchfox.org/mozilla-central/source/testing/web-platform/meta${this.props.result.test}.ini`;\n        let rowExtra = (<span>\n                         [<a href={testUrl}>test</a>]\n                         [<a href={resultUrl}>{this.props.result.legacy_status[0].total} subtests</a>]\n                         [<a href={metaUrl}>gecko metadata</a>]</span>);\n        return (\n                <TreeRow rowTitle={<code>{this.props.result.test}</code>}\n                  rowExtra={rowExtra}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}/>\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let browser of results.keys()) {\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async componentDidMount() {\n        let resultData = new Map();\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            resultData.set(browser, fetch(url).then(resp => resp.json()));\n        }\n        await Promise.all(Array.from(resultData.values()));\n        for (let [browser, promise] of resultData) {\n            resultData.set(browser, await promise);\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}/>));\n        return (<table className=\"results\">\n                  <thead>\n                    <tr>\n                      <th></th>\n                      {headerRow}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {resultRows}\n                  </tbody>\n                </table>);\n    }\n}\n\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = new Map();\n        let lsan = new Map();\n        let crashes = new Map();\n\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            if (dirData.disabled) {\n                disabled.set(dir, dirData.disabled);\n            }\n            if (dirData['lsan-allowed']) {\n                lsan.set(dir, dirData['lsan-allowed']);\n            }\n            if (dirData.expected_CRASH) {\n                crashes.set(dir, dirData.expected_CRASH.map(cond => [cond, null]));\n            }\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                if (testData.disabled) {\n                    disabled.set(testKey, testData.disabled);\n                }\n                if (testData.expected_CRASH) {\n                    crashes.set(testKey, testData.expected_CRASH.map(cond => [cond, null]));\n                }\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    if (subtestData.disabled) {\n                        disabled.set(subtestKey, subtestData.disabled);\n                    }\n                    if (subtestData.expected_CRASH) {\n                        crashes.set(subtestKey, subtestData.expected_CRASH.map(cond => [cond, null]));\n                    }\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        console.log(this.props.data);\n        let content;\n        if (this.props.data === null) {\n            content = <p>Loading</p>;\n        } else {\n            content = [];\n            let byType = this.groupData();\n            console.log(byType);\n            if (byType.crashes) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.crashes)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 test={test}\n                                 values={values}\n                                 render={value => null}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"crashes\">\n                                   <h2>Crashes</h2>\n                                   <p>{items.length} tests crash in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.disabled) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.disabled)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 test={test}\n                                 values={values}\n                                 render={value => <MaybeBugLink value={value} />}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"disabled\">\n                                   <h2>Disabled</h2>\n                                   <p>{items.length} tests are disabled in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.lsan) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.lsan)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 test={test}\n                                 values={values}\n                                 render={value => <LsanListValue value={value}/>} />);\n                }\n                if (items.length) {\n                    content.push(<section key=\"lsan\">\n                                   <h2>LSAN Failures</h2>\n                                   <p>{items.length} directories have LSAN failures</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            return (<section>\n                      {this.props.children}\n                      {content.length ? content : <p>No metadata available</p>}\n                    </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <p>None</p>\n                </section>);\n    }\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.test}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}