{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["reversed","iterMapSorted","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","Set","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","map","cmp","keys","_i","key","_context2","from","sort","get","_marked2","makeWptFyiUrl","path","params","arguments","url","URL","concat","defaults","_i2","_ref3","_ref2","Object","slicedToArray","searchParams","append","_arr","_loop","_i3","forEach","x","urlParams","UrlParams","classCallCheck","window","location","history","replaceState","document","title","href","name","set","_update","delete","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","state","bugComponentsMap","setState","currentBugComponent","onPathsChange","pathsArray","join","bugComponents","Map","wptRuns","geckoMetadata","geckoMetadataForPaths","indexName","artifactName","fetch","taskResp","json","taskData","taskId","taskStatusResp","taskStatus","status","runs","run","runId","artifactsResp","artifacts","artifactData","find","artifact","endsWith","artifactResp","loadTaskClusterData","componentData","processComponentData","components","componentsMap","push","bugComponent","urlPaths","split","filter","runsUrl","aligned","runsResp","runsJson","redirect","dataResp","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","loadWptRunData","geckoMetadataPromise","loadGeckoMetadata","Promise","all","pathRe","makeRe","slice","notPaths","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","values","test","notPathRe","data","allMetadata","_arr2","_i4","pathMetadata","pathPrefixes","RegExp","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","pop","_stack$pop2","basePath","obj","found","_arr3","_i5","filename","exec","relPath","prevProps","prevState","filterGeckoMetadata","react_default","createElement","id","App_RunInfo","App_BugComponentSelector","App_TestPaths","onChange","App_Tabs","App_ResultsView","label","failsIn","passesIn","App_GeckoData","Component","RunInfo","shortRev","revision","sha","full_revision_hash","BugComponentSelector","handleChange","event","_this2","target","selectItems","TestPaths","_this3","onCheckboxChange","checked","add","onUpdateClick","_this4","listItems","App_Checkbox","onClick","disabled","Checkbox","_this5","type","ResultsView","_this6","loaded","results","query","run_ids","item","and","topAndClause","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","browser","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","not","browser_name","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","orClause","or","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","pattern","searchQuery","buildQuery","method","body","JSON","stringify","headers","Content-Type","searchResp","searchData","result","dirParts","testName","dirPath","copyMeta","src","_arr4","entries","_i6","_ref6","_ref5","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","part","dirMeta","dirMetadata","_tests","testMetadata","_subtests","_arr5","_i7","_ref9","_ref8","_this7","children","testItems","App_TestItem","getMetadata","legacy_status","total","reduce","y","fetchIfPossible","fetchResults","TreeRow","_this8","handleClick","showDetails","className","rowTitle","rowExtra","TestItem","testUrl","resultUrl","metaUrl","App_TreeRow","App_TestDetails","TestDetails","_this9","_this10","resultBySubtest","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_ref14","_ref11","browserResults","message","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","subtests","subtest","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","resultByBrowser","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","filteredResultBySubtest","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_loop2","_ref12","_ref13","_iterator11","rv","resultData","_iterator14","_iteratorNormalCompletion14","_step14","summaryUrl","results_url","parts","then","resp","promise","filteredResults","processResultData","_this11","headerRow","subtestMetadata","resultRows","_ref18","_ref19","App_ResultRow","App_MetaSummary","MetaSummary","_this12","renderBug","App_MaybeBugLink","items","render","App_InlineOrTreeMetadata","str","toUpperCase","InlineOrTreeMetadata","App_GeckoMetadataLine","ResultRow","_this13","cells","App_ResultCell","ResultCell","GeckoData","lsan","crashes","_arr6","_i8","_ref22","_ref21","dir","dirData","expected_CRASH","cond","_arr7","_i9","_ref25","_ref24","testData","testKey","_arr8","_i10","_ref28","_ref27","subtestData","subtestKey","content","byType","groupData","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_ref31","_ref30","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_ref34","_ref33","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_ref37","_ref36","App_LsanListValue","GeckoMetadataLine","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_ref40","_ref39","condition","conditionStr","valueList","MaybeBugLink","_arr9","_i11","match","LsanListValue","frames","Tabs","_this14","handleClickTab","activeTab","_this15","tabItems","child","App_Tab","active","activeTabContent","Tab","_this16","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4942ca2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://staging.wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nfunction* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nfunction arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nfunction setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    for (let [key, value] of defaults) {\n        url.searchParams.append(key, value);\n    }\n    for (let key of Object.keys(params)) {\n        let value = params[key];\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location)\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst urlParams = new UrlParams();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            wptRuns: null,\n            geckoMetadata: {},\n            geckoMetadataForPaths: {},\n        };\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let taskResp = await fetch(`${TASK_INDEX_BASE}/${indexName}`);\n        let taskData = await taskResp.json();\n        let taskId = taskData.taskId;\n        let taskStatusResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/status`);\n        let taskStatus = await taskStatusResp.json();\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifactsResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`);\n        let artifacts = await artifactsResp.json();\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        let artifactResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`);\n        return artifactResp.json();\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let runsUrl = makeWptFyiUrl(\"api/runs\", {aligned: \"\"});\n        let runsResp = await fetch(runsUrl);\n\n        let runsJson = await runsResp.json();\n\n        this.setState({wptRuns: runsJson});\n    }\n\n    async loadGeckoMetadata() {\n//        let metadata = await this.loadTaskClusterData(\"index.gecko.v2.try.latest.source.source-wpt-metadata-summary\",\n//                                                      \"summary.json\");\n        let dataResp = await fetch(`https://queue.taskcluster.net/v1/task/Ik2tnR1KQzi26GfvTQ2WHw/runs/0/artifacts/public/summary.json`,\n                                  {redirect: \"follow\"});\n        let metadata = await dataResp.json();\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        return (\n            <div id=\"app\">\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              <section id=\"selector\">\n                <RunInfo runs={this.state.wptRuns}/>\n                <BugComponentSelector onComponentChange={this.onComponentChange}\n                                      components={this.state.bugComponents}\n                                      value={this.state.currentBugComponent} />\n                <TestPaths\n                  paths={paths}\n                  selectedPaths={this.state.selectedPaths}\n                  onChange={this.onPathsChange} />\n              </section>\n              <section id=\"details\">\n                <Tabs>\n                  <ResultsView label=\"Firefox-only Failures\"\n                               failsIn={[\"firefox\"]}\n                               passesIn={[\"safari\", \"chrome\"]}\n                               runs={this.state.wptRuns}\n                               paths={Array.from(this.state.selectedPaths)}\n                               geckoMetadata={this.state.pathMetadata}>\n                    <h2>Firefox-only Failures</h2>\n                    <p>Tests that pass in Chrome and Safari but fail in Firefox.</p>\n                  </ResultsView>\n                  <ResultsView label=\"All Firefox Failures\"\n                               failsIn={[\"firefox\"]}\n                               passesIn={[]}\n                               runs={this.state.wptRuns}\n                               paths={Array.from(this.state.selectedPaths)}\n                               geckoMetadata={this.state.pathMetadata}>\n                    <h2>All Firefox Failures</h2>\n                    <p>Tests that fail in Firefox</p>\n                  </ResultsView>\n                <GeckoData label=\"Gecko Data\"\n                           data={this.state.pathMetadata}\n                           paths={Array.from(this.state.selectedPaths)}>\n                  <h2>Gecko metadata</h2>\n                  <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                  <p>Note: this data is currently not kept up to date</p>\n                </GeckoData>\n                </Tabs>\n              </section>\n            </div>\n        );\n    }\n}\n\nclass RunInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let shortRev = this.props.runs[0].revision;\n        let longRev = this.props.runs[0].full_revision_hash;\n        let url = makeWptFyiUrl(\"\", {sha: longRev});\n        return (<dl>\n          <dt>wpt SHA1:</dt>\n          <dd><a href={url}>{shortRev}</a></dd>\n        </dl>);\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (event) => {\n        this.props.onComponentChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.components.map(component => <option value={component.toLowerCase()} key={component.toLowerCase()}>{component}</option>);\n        if (!this.props.value) {\n            return null;\n        }\n        return (<section>\n                  <label>Bug Component: </label>\n                  <select\n                    onChange={this.handleChange}\n                    value={this.props.value}>\n                    {selectItems}\n                  </select>\n                </section>\n               );\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return (<section>\n                  <h2>Test Paths</h2>\n                  <button\n                    onClick={this.onUpdateClick}\n                    disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                    Update\n                  </button>\n                  <ul id=\"test-paths\">\n                    {listItems}\n                  </ul>\n                </section>);\n    }\n}\n\nclass Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.path}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: [],\n        };\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.props.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.props.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let searchResp = await fetch(makeWptFyiUrl(\"api/search\", {}), {\n            method: \"POST\",\n            body: JSON.stringify(searchQuery),\n            headers:{\n                  'Content-Type': 'application/json'\n            }\n        });\n        let searchData = await searchResp.json();\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(this.props.paths.map(path => `^${path}/`).join(\"|\"));\n        searchData.results = searchData.results.filter(result => pathRe.test(result.test));\n\n        return searchData;\n\n    }\n\n    getMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    render() {\n        if (!this.props.runs || !this.state.loaded) {\n            return (<div>\n                      {this.props.children}\n                      <p>Loading…</p>\n                    </div>);\n        }\n        if (this.state.results.results === null) {\n            return (<div>\n                      {this.props.children}\n                      <p>Load failed</p>\n                    </div>);\n        }\n        if (!this.state.results.results.length) {\n            return (<div>\n                      {this.props.children}\n                      <p>No results</p>\n                    </div>);\n        }\n        let testItems = this.state.results.results.map(result => (<TestItem\n                                                                  failsIn={this.props.failsIn}\n                                                                  passesIn={this.props.passesIn}\n                                                                  runs={this.props.runs}\n                                                                  result={result}\n                                                                  key={result.test}\n                                                                  geckoMetadata={this.getMetadata(result.test)}\n/>));\n        testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n        return (<div>\n                  {this.props.children}\n                  <p>{this.state.results.results.length} top-level tests with\n                    &nbsp;{this.state.results.results\n                     .map(x => x.legacy_status[0].total)\n                     .reduce((x,y) => x+y, 0)} subtests</p>\n                  <ul>{testItems}</ul>\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({});\n    }\n\n    async componentDidUpdate(prevProps) {\n        await this.fetchIfPossible(prevProps);\n    }\n\n    async fetchIfPossible(prevProps) {\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loaded &&\n            arraysEqual(this.props.paths, prevProps.paths) &&\n            arraysEqual(this.props.failsIn, prevProps.failsIn) &&\n            arraysEqual(this.props.passesIn, prevProps.passesIn)) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loaded: true});\n            return;\n        }\n        let results = await this.fetchResults();\n        this.setState({results, loaded: true});\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC\" : \"\\u25B6\"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let testUrl = `http://w3c-test.org${this.props.result.test}`;\n        let resultUrl = makeWptFyiUrl(`results/${this.props.result.test}`);\n        let metaUrl = `http://searchfox.org/mozilla-central/source/testing/web-platform/meta${this.props.result.test}.ini`;\n        let rowExtra = (<span>\n                         [<a href={testUrl}>test</a>]\n                         [<a href={resultUrl}>{this.props.result.legacy_status[0].total} subtests</a>]\n                         [<a href={metaUrl}>gecko metadata</a>]</span>);\n        return (\n                <TreeRow rowTitle={<code>{this.props.result.test}</code>}\n                  rowExtra={rowExtra}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let browser of results.keys()) {\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async componentDidMount() {\n        let resultData = new Map();\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            resultData.set(browser, fetch(url).then(resp => resp.json()));\n        }\n        await Promise.all(Array.from(resultData.values()));\n        for (let [browser, promise] of resultData) {\n            resultData.set(browser, await promise);\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)} />));\n        return (<div>\n                  <MetaSummary\n                    test={this.props.test}\n                    data={this.props.geckoMetadata} />\n                  <section>\n                    <h3>Results</h3>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                  </section>\n                </div>);\n    }\n}\n\nclass MetaSummary extends Component {\n    render() {\n        if (!this.props.data) {\n            return null;\n        }\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let props = [{name: \"disabled\", render: renderBug},\n                     {name: \"bug\", render: renderBug},\n                     {name: \"crash\", title: \"Crashes\", render: renderBug}];\n        let items = props\n            .map(item => {\n                if (this.props.data.has(item.name)) {\n                    return (<InlineOrTreeMetadata\n                              key={item.name}\n                              title={item.title ? item.title : capitalize(item.name)}\n                              values={this.props.data.get(item.name)}\n                              render={item.render}/>);\n                }\n                return null;\n            })\n            .filter(x => x !== null);\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <MetaSummary data={this.props.geckoMetadata}/>\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = new Map();\n        let lsan = new Map();\n        let crashes = new Map();\n\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            if (dirData.disabled) {\n                disabled.set(dir, dirData.disabled);\n            }\n            if (dirData['lsan-allowed']) {\n                lsan.set(dir, dirData['lsan-allowed']);\n            }\n            if (dirData.expected_CRASH) {\n                crashes.set(dir, dirData.expected_CRASH.map(cond => [cond, null]));\n            }\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                if (testData.disabled) {\n                    disabled.set(testKey, testData.disabled);\n                }\n                if (testData.expected_CRASH) {\n                    crashes.set(testKey, testData.expected_CRASH.map(cond => [cond, null]));\n                }\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    if (subtestData.disabled) {\n                        disabled.set(subtestKey, subtestData.disabled);\n                    }\n                    if (subtestData.expected_CRASH) {\n                        crashes.set(subtestKey, subtestData.expected_CRASH.map(cond => [cond, null]));\n                    }\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        let content;\n        if (this.props.data === null) {\n            content = <p>Loading</p>;\n        } else {\n            content = [];\n            let byType = this.groupData();\n            if (byType.crashes) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.crashes)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => null}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"crashes\">\n                                   <h2>Crashes</h2>\n                                   <p>{items.length} tests crash in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.disabled) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.disabled)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <MaybeBugLink value={value} />}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"disabled\">\n                                   <h2>Disabled</h2>\n                                   <p>{items.length} tests are disabled in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.lsan) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.lsan)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <LsanListValue value={value}/>} />);\n                }\n                if (items.length) {\n                    content.push(<section key=\"lsan\">\n                                   <h2>LSAN Failures</h2>\n                                   <p>{items.length} directories have LSAN failures</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            return (<section>\n                      {this.props.children}\n                      {content.length ? content : <p>No metadata available</p>}\n                    </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <p>None</p>\n                </section>);\n    }\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}