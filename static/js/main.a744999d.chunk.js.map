{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["reversed","iterMapSorted","enumerate","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","Set","LOADING_STATE","Object","freeze","NONE","LOADING","COMPLETE","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","map","cmp","keys","_i","key","_context2","from","sort","get","_marked2","makeWptFyiUrl","path","params","arguments","url","URL","concat","defaults","_i2","_ref3","_ref2","slicedToArray","searchParams","append","_arr","_loop","_i3","forEach","x","FetchError","resp","_this","message","classCallCheck","status","statusText","possibleConstructorReturn","getPrototypeOf","call","name","Error","fetchJson","_callee17","options","_context20","fetch","sent","ok","json","abrupt","iter","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","item","_context3","t0","finish","_marked3","urlParams","UrlParams","window","location","history","replaceState","document","title","href","set","_update","delete","makeError","id","App","props","_this2","onError","error","setState","state","errors","onDismissError","idx","findIndex","splice","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","bugComponentsMap","currentBugComponent","onPathsChange","pathsArray","join","bugComponents","Map","wptRuns","geckoMetadata","geckoMetadataForPaths","loading_state","retry","hasOwnProperty","redirect","_context4","indexName","artifactName","_callee2","_context5","_this3","loadTaskClusterData","fetchData","taskData","taskId","taskStatus","runs","run","runId","artifacts","artifactData","find","artifact","endsWith","componentData","processComponentData","components","componentsMap","push","bugComponent","urlPaths","split","filter","runsUrl","aligned","asyncToGenerator","mark","_callee5","_context8","_this4","loadWptRunData","_callee7","_context10","_this5","loadGeckoMetadata","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","geckoMetadataPromise","Promise","all","pathRe","makeRe","slice","notPaths","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","values","test","notPathRe","data","allMetadata","_arr2","_i4","pathMetadata","pathPrefixes","RegExp","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","pop","_stack$pop2","basePath","obj","found","_arr3","_i5","filename","exec","relPath","prevProps","prevState","filterGeckoMetadata","body","react_default","createElement","App_RunInfo","App_BugComponentSelector","App_TestPaths","onChange","App_Tabs","App_ResultsView","label","failsIn","passesIn","App_GeckoData","App_ErrorArea","Component","ErrorArea","onDismiss","_this6","_this7","errorLines","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_loop2","_ref7","_ref8","App_ErrorLine","_iterator5","className","ErrorLine","_this8","_this$props$error","extraControls","onClick","RunInfo","shortRev","revision","sha","full_revision_hash","BugComponentSelector","handleChange","event","_this9","target","selectItems","TestPaths","_this10","onCheckboxChange","checked","add","onUpdateClick","_this11","listItems","App_Checkbox","disabled","Checkbox","_this12","type","ResultsView","_this13","results","query","run_ids","and","topAndClause","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","browser","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","not","browser_name","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","orClause","or","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","pattern","searchQuery","buildQuery","method","JSON","stringify","headers","Content-Type","_context14","_retry","_callee10","_context13","_this14","fetchResults","apply","result","dirParts","testName","dirPath","copyMeta","src","_arr4","entries","_i6","_ref11","_ref10","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","part","dirMeta","dirMetadata","_tests","testMetadata","_subtests","_arr5","_i7","_ref14","_ref13","_this15","children","testItems","App_TestItem","getMetadata","legacy_status","total","reduce","y","fetchIfPossible","TreeRow","_this16","handleClick","showDetails","rowTitle","rowExtra","TestItem","App_TreeRow","App_TestDetails","TestDetails","_this17","loaded","_this18","resultBySubtest","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_ref19","_ref16","browserResults","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","subtests","subtest","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","resultByBrowser","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","filteredResultBySubtest","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_loop3","_ref17","_ref18","_iterator13","rv","resultData","browsers","promises","_iterator16","_iteratorNormalCompletion16","_step16","summaryUrl","results_url","parts","promise","then","success","catch","e","resolved","_iterator17","_iteratorNormalCompletion17","_step17","_ref22","_ref21","filteredResults","processResultData","_this19","headerRow","subtestMetadata","resultRows","_ref23","_ref24","App_ResultRow","App_MetaSummary","MetaSummary","items","_this20","renderBug","App_MaybeBugLink","render","App_InlineOrTreeMetadata","str","toUpperCase","InlineOrTreeMetadata","App_GeckoMetadataLine","ResultRow","_this21","cells","App_ResultCell","ResultCell","GeckoData","lsan","crashes","_arr6","_i8","_ref27","_ref26","dir","dirData","expected_CRASH","cond","_arr7","_i9","_ref30","_ref29","testData","testKey","_arr8","_i10","_ref33","_ref32","subtestData","subtestKey","content","byType","groupData","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_ref36","_ref35","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_ref39","_ref38","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_ref42","_ref41","App_LsanListValue","GeckoMetadataLine","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_ref45","_ref44","condition","conditionStr","valueList","MaybeBugLink","_arr9","_i11","match","LsanListValue","frames","Tabs","_this22","handleClickTab","activeTab","_this23","tabItems","child","App_Tab","active","activeTabContent","Tab","_this24","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a744999d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://staging.wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nconst LOADING_STATE = Object.freeze({\n    NONE: 0,\n    LOADING: 1,\n    COMPLETE: 2\n});\n\nfunction* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nfunction arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nfunction setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    for (let [key, value] of defaults) {\n        url.searchParams.append(key, value);\n    }\n    for (let key of Object.keys(params)) {\n        let value = params[key];\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n\nclass FetchError extends Error {\n    constructor(resp, message=null) {\n        if (!message) {\n            message = `Fetch for ${resp.url} returned status ${resp.status} ${resp.statusText}`;\n        }\n        super(message);\n        this.resp = resp;\n        this.name = \"FetchError\";\n    }\n}\n\nasync function fetchJson(url, options) {\n    let resp = await fetch(url, options);\n    if (!resp.ok) {\n        throw new FetchError(resp);\n    }\n    return await resp.json();\n}\n\nfunction *enumerate(iter) {\n    let count = 0;\n    for (let item of iter) {\n        yield [count, item];\n        count++;\n    }\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location);\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst urlParams = new UrlParams();\n\nlet makeError = (() => {\n    let id = -1;\n    return (err, options) => {\n        id++;\n        return {id, err, options};\n    };\n})();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            wptRuns: null,\n            geckoMetadata: {},\n            geckoMetadataForPaths: {},\n            errors: [],\n            loading_state: LOADING_STATE.NONE,\n        };\n    }\n\n    onError = (err, options={}) => {\n        let error = makeError(err, options);\n        this.setState(state => {return {errors: state.errors.concat(error)};});\n    }\n\n    onDismissError = (id) => {\n        let errors = Array.from(this.state.errors);\n        let idx = errors.findIndex(x => x.id === id);\n        if (idx === undefined) {\n            return;\n        }\n        errors.splice(idx, 1);\n        this.setState({errors});\n    }\n\n    async fetchData(url, retry, options={}) {\n        if (!options.hasOwnProperty(\"redirect\")) {\n            options.redirect = \"follow\";\n        }\n        try {\n            return await fetchJson(url, options);\n        } catch(e) {\n            this.onError(e, {retry});\n            throw e;\n        }\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let retry = async () => await this.loadTaskClusterData(indexName, artifactName);\n        let taskData = await this.fetchData(`${TASK_INDEX_BASE}/${indexName}`,\n                                            retry);\n        let taskId = taskData.taskId;\n        let taskStatus = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/status`,\n                                              retry);\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifacts = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`,\n                                             retry);\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        return this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`,\n                              retry);\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let runsUrl = makeWptFyiUrl(\"api/runs\", {aligned: \"\"});\n        let runs = await this.fetchData(runsUrl, async () => this.loadWptRunData());\n        this.setState({wptRuns: runs});\n    }\n\n    async loadGeckoMetadata() {\n//        let metadata = await this.loadTaskClusterData(\"index.gecko.v2.try.latest.source.source-wpt-metadata-summary\",\n//                                                      \"summary.json\");\n        let metadata = await this.fetchData(`https://queue.taskcluster.net/v1/task/Ik2tnR1KQzi26GfvTQ2WHw/runs/0/artifacts/public/summary.json`,\n                                            async () => this.loadGeckoMetadata());\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        this.setState({loading_state: LOADING_STATE.LOADING});\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n        this.setState({loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        let body;\n        if (this.state.loading_state != LOADING_STATE.COMPLETE) {\n            body = <p>Loading…</p>;\n        } else {\n            body = [<section id=\"selector\">\n                      <RunInfo runs={this.state.wptRuns}/>\n                      <BugComponentSelector onComponentChange={this.onComponentChange}\n                                            components={this.state.bugComponents}\n                                            value={this.state.currentBugComponent} />\n                      <TestPaths\n                        paths={paths}\n                        selectedPaths={this.state.selectedPaths}\n                        onChange={this.onPathsChange} />\n                    </section>,\n                    <section id=\"details\">\n                      <Tabs>\n                        <ResultsView label=\"Firefox-only Failures\"\n                                     failsIn={[\"firefox\"]}\n                                     passesIn={[\"safari\", \"chrome\"]}\n                                     runs={this.state.wptRuns}\n                                     paths={Array.from(this.state.selectedPaths)}\n                                     geckoMetadata={this.state.pathMetadata}\n                                     onError={this.onError}>\n                          <h2>Firefox-only Failures</h2>\n                          <p>Tests that pass in Chrome and Safari but fail in Firefox.</p>\n                        </ResultsView>\n                        <ResultsView label=\"All Firefox Failures\"\n                                     failsIn={[\"firefox\"]}\n                                     passesIn={[]}\n                                     runs={this.state.wptRuns}\n                                     paths={Array.from(this.state.selectedPaths)}\n                                     geckoMetadata={this.state.pathMetadata}\n                                     onError={this.onError}>\n                          <h2>All Firefox Failures</h2>\n                          <p>Tests that fail in Firefox</p>\n                        </ResultsView>\n                        <GeckoData label=\"Gecko Data\"\n                                   data={this.state.pathMetadata}\n                                   paths={Array.from(this.state.selectedPaths)}\n                                   onError={this.onError}>\n                          <h2>Gecko metadata</h2>\n                          <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                          <p>Note: this data is currently not kept up to date</p>\n                        </GeckoData>\n                      </Tabs>\n                    </section>];\n        }\n        return (\n            <div id=\"app\">\n              <ErrorArea errors={this.state.errors}\n                         onDismissError={this.onDismissError}/>\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              {body}\n            </div>\n        );\n    }\n}\n\nclass ErrorArea extends Component {\n    onDismiss = (id) => {\n        this.props.onDismissError(id);\n    }\n\n    render() {\n        if (!this.props.errors.length) {\n            return null;\n        }\n        let errorLines = [];\n        for (let [idx, error] of enumerate(this.props.errors)) {\n            errorLines.push(<ErrorLine\n                              key={`error-${error.id}`}\n                              error={error}\n                              onDismiss={() => this.onDismiss(idx)}/>);\n        }\n        return (<ul className=\"errors\">\n                  {errorLines}\n                </ul>);\n    }\n}\n\nclass ErrorLine extends Component {\n    render() {\n        let {id, err, options} = this.props.error;\n        let extraControls = [];\n        if (options.retry) {\n            let retry = () => {\n                this.props.onDismiss(id);\n                options.retry();\n            };\n            extraControls.push(<button onClick={retry} key=\"retry\">Retry</button>);\n        }\n        return (<li>\n                  {err.message || \"Unknown Error\"}\n                  <button onClick={() => this.props.onDismiss(id)}>Close</button>\n                  {extraControls}\n                </li>);\n    }\n}\n\nclass RunInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let shortRev = this.props.runs[0].revision;\n        let longRev = this.props.runs[0].full_revision_hash;\n        let url = makeWptFyiUrl(\"\", {sha: longRev});\n        return (<dl>\n          <dt>wpt SHA1:</dt>\n          <dd><a href={url}>{shortRev}</a></dd>\n        </dl>);\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (event) => {\n        this.props.onComponentChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.components.map(component => <option value={component.toLowerCase()} key={component.toLowerCase()}>{component}</option>);\n        if (!this.props.value) {\n            return null;\n        }\n        return (<section>\n                  <label>Bug Component: </label>\n                  <select\n                    onChange={this.handleChange}\n                    value={this.props.value}>\n                    {selectItems}\n                  </select>\n                </section>\n               );\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return (<section>\n                  <h2>Test Paths</h2>\n                  <button\n                    onClick={this.onUpdateClick}\n                    disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                    Update\n                  </button>\n                  <ul id=\"test-paths\">\n                    {listItems}\n                  </ul>\n                </section>);\n    }\n}\n\nclass Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.path}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading_state: LOADING_STATE.NONE,\n            results: [],\n        };\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.props.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.props.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let results;\n        try {\n            results = await fetchJson(makeWptFyiUrl(\"api/search\", {}), {\n                method: \"POST\",\n                body: JSON.stringify(searchQuery),\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            });\n        } catch(e) {\n            this.props.onError(e, {retry: async () => this.fetchResults()});\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n            throw e;\n        }\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(this.props.paths.map(path => `^${path}/`).join(\"|\"));\n        results.results = results.results.filter(result => pathRe.test(result.test));\n\n        this.setState({results, loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    getMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    render() {\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            return (<div>\n                      {this.props.children}\n                      <p>Loading…</p>\n                    </div>);\n        }\n        if (this.state.results.results === null) {\n            return (<div>\n                      {this.props.children}\n                      <p>Load failed</p>\n                    </div>);\n        }\n        if (!this.state.results.results.length) {\n            return (<div>\n                      {this.props.children}\n                      <p>No results</p>\n                    </div>);\n        }\n        let testItems = this.state.results.results.map(result => (<TestItem\n                                                                    failsIn={this.props.failsIn}\n                                                                    passesIn={this.props.passesIn}\n                                                                    runs={this.props.runs}\n                                                                    result={result}\n                                                                    key={result.test}\n                                                                    geckoMetadata={this.getMetadata(result.test)}\n                                                                    onError={this.props.onError}/>));\n        testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n        return (<div>\n                  {this.props.children}\n                  <p>{this.state.results.results.length} top-level tests with\n                    &nbsp;{this.state.results.results\n                     .map(x => x.legacy_status[0].total)\n                     .reduce((x,y) => x+y, 0)} subtests</p>\n                  <ul>{testItems}</ul>\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({});\n    }\n\n    async componentDidUpdate(prevProps) {\n        await this.fetchIfPossible(prevProps);\n    }\n\n    async fetchIfPossible(prevProps) {\n        if (this.state.loading_state === LOADING_STATE.LOADING) {\n            return;\n        }\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loading_state === LOADING_STATE.COMPLETE &&\n            this.props.paths === prevProps.paths &&\n            this.props.failsIn === prevProps.failsIn &&\n            this.props.passesIn === prevProps.passesIn) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loading_state: LOADING_STATE.COMPLETE});\n            return;\n        }\n        this.setState({results: null,\n                       loading_state: LOADING_STATE.LOADING});\n        await this.fetchResults();\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC \" : \"\\u25B6 \"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let rowTitle = `${this.props.result.test} [${this.props.result.legacy_status[0].total} subtests]`;\n        return (\n                <TreeRow rowTitle={<code>{rowTitle}</code>}\n                  rowExtra={null}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata}\n                    onError={this.props.onError} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let run of this.props.runs) {\n                let browser = run.browser_name;\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async fetchData() {\n        let resultData = new Map();\n        let browsers = [];\n        let promises = [];\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            let promise = fetchJson(url)\n                .then(x => {return {success: true, value:x};})\n                .catch(e => {return {success: false, value:e};});\n            browsers.push(browser);\n            promises.push(promise);\n        }\n        let resolved = await Promise.all(promises);\n        for (let [idx, data] of enumerate(resolved)) {\n            if (data.success) {\n                let browser = browsers[idx];\n                resultData.set(browser, data.value);\n            }\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n\n    }\n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)} />));\n        return (<div>\n                  <ul>\n                    <li><a href={`http://w3c-test.org${this.props.test}`}>Live test</a></li>\n                    <li><a href={makeWptFyiUrl(`results/${this.props.test}`)}>wpt.fyi</a></li>\n                    <li><a href={`http://searchfox.org/mozilla-central/source/testing/web-platform/meta${this.props.test}.ini`}>Gecko Metadata</a></li>\n                  </ul>\n                  <MetaSummary\n                    test={this.props.test}\n                    data={this.props.geckoMetadata}/>\n                  <section>\n                    <h3>Results</h3>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                  </section>\n                </div>);\n    }\n}\n\nclass MetaSummary extends Component {\n    render() {\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let items;\n        if (this.props.data) {\n            let metaProps = [{name: \"disabled\", render: renderBug},\n                             {name: \"bug\", render: renderBug},\n                             {name: \"crash\", title: \"Crashes\", render: renderBug}];\n            items = metaProps\n                .map(item => {\n                    if (this.props.data.has(item.name)) {\n                        return (<InlineOrTreeMetadata\n                                  key={item.name}\n                                  title={item.title ? item.title : capitalize(item.name)}\n                                  values={this.props.data.get(item.name)}\n                                  render={item.render}/>);\n                    }\n                    return null;\n                })\n                .filter(x => x !== null);\n        } else {\n            items = [];\n        }\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <MetaSummary\n                       data={this.props.geckoMetadata} />\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = new Map();\n        let lsan = new Map();\n        let crashes = new Map();\n\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            if (dirData.disabled) {\n                disabled.set(dir, dirData.disabled);\n            }\n            if (dirData['lsan-allowed']) {\n                lsan.set(dir, dirData['lsan-allowed']);\n            }\n            if (dirData.expected_CRASH) {\n                crashes.set(dir, dirData.expected_CRASH.map(cond => [cond, null]));\n            }\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                if (testData.disabled) {\n                    disabled.set(testKey, testData.disabled);\n                }\n                if (testData.expected_CRASH) {\n                    crashes.set(testKey, testData.expected_CRASH.map(cond => [cond, null]));\n                }\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    if (subtestData.disabled) {\n                        disabled.set(subtestKey, subtestData.disabled);\n                    }\n                    if (subtestData.expected_CRASH) {\n                        crashes.set(subtestKey, subtestData.expected_CRASH.map(cond => [cond, null]));\n                    }\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        let content;\n        if (this.props.data === null) {\n            content = <p>Loading</p>;\n        } else {\n            content = [];\n            let byType = this.groupData();\n            if (byType.crashes) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.crashes)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => null}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"crashes\">\n                                   <h2>Crashes</h2>\n                                   <p>{items.length} tests crash in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.disabled) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.disabled)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <MaybeBugLink value={value} />}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"disabled\">\n                                   <h2>Disabled</h2>\n                                   <p>{items.length} tests are disabled in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.lsan) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.lsan)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <LsanListValue value={value}/>} />);\n                }\n                if (items.length) {\n                    content.push(<section key=\"lsan\">\n                                   <h2>LSAN Failures</h2>\n                                   <p>{items.length} directories have LSAN failures</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            return (<section>\n                      {this.props.children}\n                      {content.length ? content : <p>No metadata available</p>}\n                    </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <p>None</p>\n                </section>);\n    }\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}