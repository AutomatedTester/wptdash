{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["reversed","TASK_QUEUE_BASE","WPT_FYI_BASE","process","passStatuses","Set","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","makeWptFyiUrl","path","params","arguments","url","URL","concat","defaults","_i","_ref3","_ref2","Object","slicedToArray","key","searchParams","append","_arr","keys","_loop","_i2","forEach","x","urlParams","UrlParams","classCallCheck","window","location","history","replaceState","document","title","href","name","get","set","_update","delete","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","state","bugComponentsMap","setState","currentBugComponent","onPathsChange","pathsArray","from","sort","join","bugComponents","Map","wptRuns","fetch","taskResp","json","taskData","taskId","taskStatusResp","taskStatus","status","runs","run","runId","artifactsResp","artifacts","artifactData","find","artifact","endsWith","artifactResp","componentData","processComponentData","components","componentsMap","bugComponent","urlPaths","split","filter","runsUrl","aligned","runsResp","runsJson","bugComponentPromise","loadBugComponentData","wptRunDataPromise","loadWptRunData","Promise","all","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","pop","_stack$pop2","basePath","obj","found","_arr2","_i3","filename","push","exec","slice","react_default","createElement","id","App_RunInfo","App_BugComponentSelector","App_TestPaths","onChange","App_Tabs","App_ResultsView","label","failsIn","passesIn","Component","RunInfo","shortRev","revision","sha","full_revision_hash","BugComponentSelector","handleChange","event","_this2","target","selectItems","map","TestPaths","_this3","onCheckboxChange","checked","add","onUpdateClick","prevProps","_this4","listItems","App_Checkbox","onClick","disabled","Checkbox","_this5","type","ResultsView","_this6","loaded","results","query","run_ids","item","and","topAndClause","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","browser","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","not","browser_name","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","orClause","or","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","pattern","searchQuery","buildQuery","method","body","JSON","stringify","headers","Content-Type","searchResp","searchData","_this7","children","testItems","result","App_TestItem","test","fetchIfPossible","fetchResults","TestItem","_this8","handleClick","showDetails","testUrl","resultUrl","metaUrl","className","legacy_status","total","App_TestDetails","visible","TestDetails","_this9","_this10","resultBySubtest","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_ref8","_ref5","browserResults","message","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","subtests","subtest","filteredResultBySubtest","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_loop2","_ref6","_ref7","resultByBrowser","_iterator8","rv","resultData","_iterator10","_iteratorNormalCompletion10","_step10","summaryUrl","results_url","parts","then","resp","values","promise","filteredResults","processResultData","_this11","headerRow","resultRows","_ref12","_ref13","App_ResultRow","ResultRow","_this12","cells","App_ResultCell","ResultCell","Tabs","_this13","handleClickTab","activeTab","_this14","tabItems","child","App_Tab","active","activeTabContent","Tab","_this15","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.580c9025.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst BUGZILLA_TASK_URL = \"https://index.taskcluster.net/v1/task/gecko.v2.mozilla-central.latest.source.source-bugzilla-info\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = process.env.REACT_APP_WPT_FYI;\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nfunction* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nfunction arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nfunction setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    for (let [key, value] of defaults) {\n        url.searchParams.append(key, value);\n    }\n    for (let key of Object.keys(params)) {\n        let value = params[key];\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location)\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst urlParams = new UrlParams();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            wptRuns: null\n        };\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let taskResp = await fetch(BUGZILLA_TASK_URL);\n        let taskData = await taskResp.json();\n        let taskId = taskData.taskId;\n        let taskStatusResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/status`);\n        let taskStatus = await taskStatusResp.json();\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifactsResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`);\n        let artifacts = await artifactsResp.json();\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(\"components-normalized.json\"));\n        let artifactResp = await fetch(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`);\n        let componentData = await artifactResp.json();\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let runsUrl = makeWptFyiUrl(\"api/runs\", {aligned: \"\"});\n        let runsResp = await fetch(runsUrl);\n\n        let runsJson = await runsResp.json();\n\n        this.setState({wptRuns: runsJson});\n    }\n\n    async componentDidMount() {\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise]);\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        componentToPath.get(canonicalComponent).push(basePath.slice(wptRoot.length));\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        return (\n            <div id=\"app\">\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              <section id=\"selector\">\n                <RunInfo runs={this.state.wptRuns}/>\n                <BugComponentSelector onComponentChange={this.onComponentChange}\n                                      components={this.state.bugComponents}\n                                      value={this.state.currentBugComponent} />\n                <TestPaths\n                  paths={paths}\n                  selectedPaths={this.state.selectedPaths}\n                  onChange={this.onPathsChange} />\n              </section>\n              <section id=\"details\">\n                <Tabs>\n                  <ResultsView label=\"Firefox-only Failures\"\n                               failsIn={[\"firefox\"]}\n                               passesIn={[\"safari\", \"chrome\"]}\n                               runs={this.state.wptRuns}\n                               paths={Array.from(this.state.selectedPaths)}>\n                    <h2>Firefox-only Failures</h2>\n                    <p>Tests that pass in Chrome and Safari but fail in Firefox.</p>\n                  </ResultsView>\n                  <ResultsView label=\"All Firefox Failures\"\n                               failsIn={[\"firefox\"]}\n                               passesIn={[]}\n                               runs={this.state.wptRuns}\n                               paths={Array.from(this.state.selectedPaths)}>\n                    <h2>All Firefox Failures</h2>\n                    <p>Tests that fail in Firefox</p>\n                  </ResultsView>\n                </Tabs>\n              </section>\n            </div>\n        );\n    }\n}\n\nclass RunInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let shortRev = this.props.runs[0].revision;\n        let longRev = this.props.runs[0].full_revision_hash;\n        let url = makeWptFyiUrl(\"\", {sha: longRev});\n        return (<dl>\n          <dt>wpt SHA1:</dt>\n          <dd><a href={url}>{shortRev}</a></dd>\n        </dl>);\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (event) => {\n        this.props.onComponentChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.components.map(component => <option value={component.toLowerCase()} key={component.toLowerCase()}>{component}</option>);\n        if (!this.props.value) {\n            return null;\n        }\n        return (<section>\n                  <label>Bug Component: </label>\n                  <select\n                    onChange={this.handleChange}\n                    value={this.props.value}>\n                    {selectItems}\n                  </select>\n                </section>\n               );\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return (<section>\n                  <h2>Test Paths</h2>\n                  <button\n                    onClick={this.onUpdateClick}\n                    disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                    Update\n                  </button>\n                  <ul id=\"test-paths\">\n                    {listItems}\n                  </ul>\n                </section>);\n    }\n}\n\nclass Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.path}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: [],\n        };\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.props.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.props.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let searchResp = await fetch(makeWptFyiUrl(\"api/search\", {}), {\n            method: \"POST\",\n            body: JSON.stringify(searchQuery),\n            headers:{\n                  'Content-Type': 'application/json'\n            }\n        });\n        let searchData = await searchResp.json();\n\n        return searchData;\n\n    }\n\n    render() {\n        if (!this.props.runs || !this.state.loaded) {\n            return (<div>\n                      {this.props.children}\n                      <p>Loading…</p>\n                    </div>);\n        }\n        if (this.state.results.results === null) {\n            return (<div>\n                      {this.props.children}\n                      <p>Load failed</p>\n                    </div>);\n        }\n        if (!this.state.results.results.length) {\n            return (<div>\n                      {this.props.children}\n                      <p>No results</p>\n                    </div>);\n        }\n        let testItems = this.state.results.results.map(result => (<TestItem\n                                                                  failsIn={this.props.failsIn}\n                                                                  passesIn={this.props.passesIn}\n                                                                  runs={this.props.runs}\n                                                                  result={result}\n                                                                  key={result.test}/>));\n        testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n        return (<div>\n                  {this.props.children}\n                  <ul>{testItems}</ul>\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({});\n    }\n\n    async componentDidUpdate(prevProps) {\n        await this.fetchIfPossible(prevProps);\n    }\n\n    async fetchIfPossible(prevProps) {\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loaded &&\n            arraysEqual(this.props.paths, prevProps.paths) &&\n            arraysEqual(this.props.failsIn, prevProps.failsIn) &&\n            arraysEqual(this.props.passesIn, prevProps.passesIn)) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loaded: true});\n            return;\n        }\n        let results = await this.fetchResults();\n        this.setState({results, loaded: true});\n    }\n}\n\nclass TestItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        // TODO: Difference between test path and file path\n        let testUrl = `http://w3c-test.org${this.props.result.test}`;\n        let resultUrl = makeWptFyiUrl(`results/${this.props.result.test}`);\n        let metaUrl = `http://searchfox.org/mozilla-central/source/testing/web-platform/meta${this.props.result.test}.ini`;\n        return (\n            <li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n              <span onClick={this.handleClick}>\n                {this.state.showDetails ? \"\\u25BC\" : \"\\u25B6\"}\n                <code>{this.props.result.test}</code>\n              </span>\n              [<a href={testUrl}>test</a>]\n              [<a href={resultUrl}>{this.props.result.legacy_status[0].total} subtests</a>]\n              [<a href={metaUrl}>gecko metadata</a>]\n              {this.state.showDetails ? (<div className=\"tree-row\">\n                                           <TestDetails\n                                             runs={this.props.runs}\n                                             visible={this.state.showDetails}\n                                             test={this.props.result.test}\n                                             passesIn={this.props.passesIn}\n                                             failsIn={this.props.failsIn}/>\n                                         </div>) : \"\"}\n            </li>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async componentDidMount() {\n        let resultData = new Map();\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            resultData.set(browser, fetch(url).then(resp => resp.json()));\n        }\n        await Promise.all(Array.from(resultData.values()));\n        for (let [browser, promise] of resultData) {\n            resultData.set(browser, await promise);\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n    }\n\n    render() {\n        if (!this.props.visible) {\n            return null;\n        }\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}/>));\n        return (<table className=\"results\">\n                  <thead>\n                    <tr>\n                      <th></th>\n                      {headerRow}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {resultRows}\n                  </tbody>\n                </table>);\n    }\n}\n\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}