{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["reversed","iterMapSorted","enumerate","TASK_QUEUE_BASE","WPT_FYI_BASE","passStatuses","Set","LOADING_STATE","Object","freeze","NONE","LOADING","COMPLETE","array","index","regenerator_default","a","wrap","_context","prev","next","length","stop","_marked","this","arraysEqual","b","Array","isArray","every","a_value","i","setsEqual","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","elem","value","has","err","return","map","cmp","keys","_i","key","_context2","from","sort","get","_marked2","makeWptFyiUrl","path","params","arguments","url","URL","concat","defaults","_i2","_ref3","_ref2","slicedToArray","searchParams","append","_arr","_loop","_i3","forEach","x","FetchError","resp","_this","message","classCallCheck","status","statusText","possibleConstructorReturn","getPrototypeOf","call","name","Error","fetchJson","_callee17","options","_context20","fetch","sent","ok","json","abrupt","iter","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","item","_context3","t0","finish","_marked3","anyRe","workerRe","testToPath","test","pathname","match","exec","urlParams","UrlParams","window","location","history","replaceState","document","title","href","set","_update","delete","makeError","id","App","props","_this2","onError","error","setState","state","errors","onDismissError","idx","findIndex","splice","onComponentChange","component","canonicalComponent","toLowerCase","selectedPaths","bugComponentsMap","currentBugComponent","onPathsChange","pathsArray","join","bugComponents","Map","wptRuns","geckoMetadata","geckoMetadataForPaths","loading_state","retry","hasOwnProperty","redirect","_context4","indexName","artifactName","_callee2","_context5","_this3","loadTaskClusterData","fetchData","taskData","taskId","taskStatus","runs","run","runId","artifacts","artifactData","find","artifact","endsWith","componentData","processComponentData","components","componentsMap","push","bugComponent","urlPaths","split","filter","runsUrl","aligned","asyncToGenerator","mark","_callee5","_context8","_this4","loadWptRunData","_callee7","_context10","_this5","loadGeckoMetadata","metadata","bugComponentPromise","loadBugComponentData","wptRunDataPromise","geckoMetadataPromise","Promise","all","pathRe","makeRe","slice","notPaths","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","values","notPathRe","data","allMetadata","_arr2","_i4","pathMetadata","pathPrefixes","RegExp","paths","pathToComponent","componentToPath","wptRoot","stack","testing","tests","pathTrimRe","_stack$pop","pop","_stack$pop2","basePath","obj","found","_arr3","_i5","filename","relPath","prevProps","prevState","filterGeckoMetadata","body","react_default","createElement","App_RunInfo","App_BugComponentSelector","App_TestPaths","onChange","App_Tabs","App_ResultsView","label","failsIn","passesIn","App_GeckoData","App_ErrorArea","Component","ErrorArea","onDismiss","_this6","_this7","errorLines","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_loop2","_ref7","_ref8","App_ErrorLine","_iterator5","className","ErrorLine","_this8","_this$props$error","extraControls","onClick","RunInfo","shortRev","revision","sha","full_revision_hash","BugComponentSelector","handleChange","event","_this9","target","selectItems","TestPaths","_this10","onCheckboxChange","checked","add","onUpdateClick","_this11","listItems","App_Checkbox","disabled","Checkbox","_this12","type","ResultsView","_this13","results","query","run_ids","and","topAndClause","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","browser","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","not","browser_name","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","orClause","or","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","pattern","searchQuery","buildQuery","method","JSON","stringify","headers","Content-Type","_context14","_retry","_callee10","_context13","_this14","fetchResults","apply","result","dirParts","testName","dirPath","copyMeta","src","_arr4","entries","_i6","_ref11","_ref10","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","part","dirMeta","dirMetadata","_tests","testMetadata","_subtests","_arr5","_i7","_ref14","_ref13","_this15","children","testItems","App_TestItem","getMetadata","legacy_status","total","reduce","y","fetchIfPossible","TreeRow","_this16","handleClick","showDetails","rowTitle","rowExtra","TestItem","App_TreeRow","App_TestDetails","TestDetails","_this17","loaded","_this18","resultBySubtest","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_ref19","_ref16","browserResults","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","subtests","subtest","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","resultByBrowser","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","filteredResultBySubtest","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_loop3","_ref17","_ref18","_iterator13","rv","resultData","browsers","promises","_iterator16","_iteratorNormalCompletion16","_step16","summaryUrl","results_url","parts","promise","then","success","catch","e","resolved","_iterator17","_iteratorNormalCompletion17","_step17","_ref22","_ref21","filteredResults","processResultData","_this19","headerRow","subtestMetadata","resultRows","_ref23","_ref24","App_ResultRow","App_MetaSummary","MetaSummary","items","_this20","renderBug","App_MaybeBugLink","render","App_InlineOrTreeMetadata","str","toUpperCase","InlineOrTreeMetadata","App_GeckoMetadataLine","ResultRow","_this21","cells","App_ResultCell","ResultCell","GeckoData","lsan","crashes","_arr6","_i8","_ref27","_ref26","dir","dirData","expected_CRASH","cond","_arr7","_i9","_ref30","_ref29","testData","testKey","_arr8","_i10","_ref33","_ref32","subtestData","subtestKey","content","byType","groupData","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_ref36","_ref35","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_ref39","_ref38","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_ref42","_ref41","App_LsanListValue","GeckoMetadataLine","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_ref45","_ref44","condition","conditionStr","valueList","MaybeBugLink","_arr9","_i11","LsanListValue","frames","Tabs","_this22","handleClickTab","activeTab","_this23","tabItems","child","App_Tab","active","activeTabContent","Tab","_this24","Boolean","hostname","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e94acfc8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst TASK_INDEX_BASE = \"https://index.taskcluster.net/v1/task\";\nconst TASK_QUEUE_BASE = \"https://queue.taskcluster.net/v1/task\";\n\nconst WPT_FYI_BASE = \"https://staging.wpt.fyi\";\n\nconst passStatuses = new Set([\"PASS\", \"OK\"]);\n\nconst LOADING_STATE = Object.freeze({\n    NONE: 0,\n    LOADING: 1,\n    COMPLETE: 2\n});\n\nfunction* reversed(array) {\n    let index = array.length;\n    while (index > 0) {\n        index--;\n        yield array[index];\n    }\n};\n\nfunction arraysEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (!Array.isArray(a) || !Array.isArray(b)) {\n        return false;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    return a.every((a_value, i) => a_value === b[i]);\n}\n\nfunction setsEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for(let elem of a) {\n        if (!b.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction* iterMapSorted(map, cmp) {\n    let keys = Array.from(map.keys());\n    keys.sort();\n    for (let key of keys) {\n        yield [key, map.get(key)];\n    }\n}\n\nfunction makeWptFyiUrl(path, params={}) {\n    let url = new URL(`${WPT_FYI_BASE}/${path}`);\n    let defaults = [[\"label\", \"master\"],\n                    [\"product\", \"chrome[experimental]\"],\n                    [\"product\", \"firefox[experimental]\"],\n                    [\"product\", \"safari[experimental]\"]];\n    for (let [key, value] of defaults) {\n        url.searchParams.append(key, value);\n    }\n    for (let key of Object.keys(params)) {\n        let value = params[key];\n        if (Array.isArray(value)) {\n            value.forEach(x => url.searchParams.append(key, x));\n        } else {\n            url.searchParams.append(key, value);\n        }\n    }\n    return url;\n}\n\nfunction capitalize(str) {\n    return str && str[0].toUpperCase() + str.slice(1);\n}\n\nclass FetchError extends Error {\n    constructor(resp, message=null) {\n        if (!message) {\n            message = `Fetch for ${resp.url} returned status ${resp.status} ${resp.statusText}`;\n        }\n        super(message);\n        this.resp = resp;\n        this.name = \"FetchError\";\n    }\n}\n\nasync function fetchJson(url, options) {\n    let resp = await fetch(url, options);\n    if (!resp.ok) {\n        throw new FetchError(resp);\n    }\n    return await resp.json();\n}\n\nfunction *enumerate(iter) {\n    let count = 0;\n    for (let item of iter) {\n        yield [count, item];\n        count++;\n    }\n}\n\nclass UrlParams {\n    constructor() {\n        this.url = new URL(window.location);\n        this.params = this.url.searchParams;\n    }\n\n    _update() {\n        window.history.replaceState({}, document.title, this.url.href);\n    }\n\n    get(name) {\n        return this.params.get(name);\n    }\n\n    has(name) {\n        return this.params.has(name);\n    }\n\n    set(name, value) {\n        this.params.set(name, value);\n        this._update();\n    }\n\n    delete(name) {\n        this.params.delete(name);\n        this._update();\n    }\n\n    append(name, value) {\n        this.params.append(name, value);\n        this._update();\n    }\n}\n\nconst anyRe = /^(.*\\.any)(:?\\..*)\\.html$/;\nconst workerRe = /^(.*\\.(:?worker|window))\\.html$/;\n\nfunction testToPath(test) {\n    let url = new URL(`https://web-platform.test${test}`);\n    let path = url.pathname;\n    let match = anyRe.exec(path);\n    if (match === null) {\n        match = workerRe.exec(path);\n    }\n    if (match !== null) {\n        path = match[1] + '.js';\n    }\n    return path;\n}\n\nconst urlParams = new UrlParams();\n\nlet makeError = (() => {\n    let id = -1;\n    return (err, options) => {\n        id++;\n        return {id, err, options};\n    };\n})();\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bugComponents: [],\n            bugComponentsMap: new Map(),\n            currentBugComponent: null,\n            selectedPaths: new Set(),\n            wptRuns: null,\n            geckoMetadata: {},\n            geckoMetadataForPaths: {},\n            errors: [],\n            loading_state: LOADING_STATE.NONE,\n        };\n    }\n\n    onError = (err, options={}) => {\n        let error = makeError(err, options);\n        this.setState(state => {return {errors: state.errors.concat(error)};});\n    }\n\n    onDismissError = (id) => {\n        let errors = Array.from(this.state.errors);\n        let idx = errors.findIndex(x => x.id === id);\n        if (idx === undefined) {\n            return;\n        }\n        errors.splice(idx, 1);\n        this.setState({errors});\n    }\n\n    async fetchData(url, retry, options={}) {\n        if (!options.hasOwnProperty(\"redirect\")) {\n            options.redirect = \"follow\";\n        }\n        try {\n            return await fetchJson(url, options);\n        } catch(e) {\n            this.onError(e, {retry});\n            throw e;\n        }\n    }\n\n    async loadTaskClusterData(indexName, artifactName) {\n        let retry = async () => await this.loadTaskClusterData(indexName, artifactName);\n        let taskData = await this.fetchData(`${TASK_INDEX_BASE}/${indexName}`,\n                                            retry);\n        let taskId = taskData.taskId;\n        let taskStatus = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/status`,\n                                              retry);\n        let runId;\n        for (let run of reversed(taskStatus.status.runs)) {\n            if (run.state === \"completed\") {\n                runId = run.runId;\n                break;\n            }\n        }\n        let artifacts = await this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts`,\n                                             retry);\n        let artifactData = artifacts.artifacts.find(artifact => artifact.name.endsWith(artifactName));\n        return this.fetchData(`${TASK_QUEUE_BASE}/${taskId}/runs/${runId}/artifacts/${artifactData.name}`,\n                              retry);\n    }\n\n    async loadBugComponentData() {\n        // TODO - Error handling\n        let componentData = await this.loadTaskClusterData(\"gecko.v2.mozilla-central.latest.source.source-bugzilla-info\",\n                                                           \"components-normalized.json\");\n\n        let [components, componentsMap] = this.processComponentData(componentData);\n        components = Array.from(components).sort();\n        components.push(\"Any\");\n\n        this.setState({\n            \"bugComponentsMap\": componentsMap,\n            \"bugComponents\": components\n        });\n\n        //TODO set paths from URL\n\n        let currentBugComponent = this.state.currentBugComponent;\n\n        if (!currentBugComponent && urlParams.has(\"bugComponent\")) {\n            let bugComponent = urlParams.get(\"bugComponent\");\n            if (componentsMap.has(bugComponent)) {\n                currentBugComponent = bugComponent;\n            }\n        }\n        if (!currentBugComponent) {\n            currentBugComponent = components[0].toLowerCase();\n        }\n\n        let selectedPaths = new Set(componentsMap.get(currentBugComponent));\n        if (urlParams.has(\"paths\")) {\n            let urlPaths = new Set(urlParams.get(\"paths\").split(\",\"));\n            selectedPaths = new Set(Array.from(selectedPaths).filter(x => urlPaths.has(x)));\n        }\n        this.setState({selectedPaths, currentBugComponent});\n    }\n\n    async loadWptRunData() {\n        let runsUrl = makeWptFyiUrl(\"api/runs\", {aligned: \"\"});\n        let runs = await this.fetchData(runsUrl, async () => this.loadWptRunData());\n        this.setState({wptRuns: runs});\n    }\n\n    async loadGeckoMetadata() {\n//        let metadata = await this.loadTaskClusterData(\"index.gecko.v2.try.latest.source.source-wpt-metadata-summary\",\n//                                                      \"summary.json\");\n        let metadata = await this.fetchData(`https://queue.taskcluster.net/v1/task/Ik2tnR1KQzi26GfvTQ2WHw/runs/0/artifacts/public/summary.json`,\n                                            async () => this.loadGeckoMetadata());\n        this.setState({geckoMetadata: metadata});\n    }\n\n    async componentDidMount() {\n        this.setState({loading_state: LOADING_STATE.LOADING});\n        let bugComponentPromise = this.loadBugComponentData();\n        let wptRunDataPromise = this.loadWptRunData();\n        let geckoMetadataPromise = this.loadGeckoMetadata();\n\n        await Promise.all([bugComponentPromise, wptRunDataPromise, geckoMetadataPromise]);\n        this.setState({loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    filterGeckoMetadata() {\n        if (!this.state.selectedPaths.size || !Object.keys(this.state.geckoMetadata).length) {\n            return;\n        }\n        function makeRe(pathPrefixes) {\n            if (!pathPrefixes.length) {\n                return null;\n            }\n            return new RegExp(`^(?:${pathPrefixes.join(\"|\")})(?:$|/)`);\n        }\n        let pathRe = makeRe(Array.from(this.state.selectedPaths).map(x => x.slice(1)));\n\n        let notPaths = [];\n        for (let path of this.state.bugComponentsMap.values()) {\n            if (!this.state.selectedPaths.has(path) &&\n                pathRe.test(path.slice(1))) {\n                notPaths.push(path);\n            }\n        }\n        let notPathRe = makeRe(notPaths);\n        let data = {};\n        let allMetadata = this.state.geckoMetadata;\n        for (let key of Object.keys(allMetadata)) {\n            if (pathRe.test(key) && (notPathRe === null || !notPathRe.test(key))) {\n                data[key] = allMetadata[key];\n            }\n        }\n\n        this.setState({pathMetadata: data});\n    }\n\n    processComponentData(componentData) {\n        let componentsMap = componentData.components;\n        let paths = componentData.paths;\n        let pathToComponent = new Map();\n        let componentToPath = new Map();\n        let wptRoot = \"testing/web-platform/tests\";\n        let stack = [[wptRoot, paths.testing[\"web-platform\"].tests]];\n        let pathTrimRe = /(.*)\\/[^/]*$/;\n        let components = [];\n\n        componentToPath.set(\"any\", []);\n\n        while (stack.length) {\n            let [basePath, obj] = stack.pop();\n            let found = false;\n            for (let filename of Object.keys(obj)) {\n                let value = obj[filename];\n                if (typeof value === \"object\") {\n                    let path = `${basePath}/${filename}`;\n                    stack.push([path, value]);\n                } else {\n                    if (found || basePath === wptRoot) {\n                        continue;\n                    }\n                    let path = basePath;\n                    let component = componentsMap[value].join(\"::\");\n                    let canonicalComponent = component.toLowerCase();\n                    while (path !== wptRoot) {\n                        if (pathToComponent.has(path) && pathToComponent.get(path) === canonicalComponent) {\n                            found = true;\n                            break;\n                        }\n                        path = pathTrimRe.exec(path)[1];\n                    }\n                    if (!found) {\n                        pathToComponent.set(basePath, canonicalComponent);\n                        if (!componentToPath.has(canonicalComponent)) {\n                            componentToPath.set(canonicalComponent, []);\n                            components.push(component);\n                        };\n                        let relPath = basePath.slice(wptRoot.length);\n                        componentToPath.get(canonicalComponent).push(relPath);\n                        componentToPath.get(\"any\").push(relPath);\n                        found = true;\n                    }\n                }\n            }\n        }\n        return [components, componentToPath];\n    }\n\n    onComponentChange = (component) => {\n        let canonicalComponent = component.toLowerCase();\n        let selectedPaths = new Set(this.state.bugComponentsMap.get(canonicalComponent));\n        urlParams.set(\"bugComponent\", component);\n        urlParams.delete(\"paths\");\n        this.setState({currentBugComponent: canonicalComponent, selectedPaths});\n    }\n\n    onPathsChange = (selectedPaths) => {\n        let pathsArray = Array.from(selectedPaths);\n        pathsArray.sort();\n        if (!arraysEqual(pathsArray, this.state.bugComponentsMap.get(this.state.currentBugComponent))) {\n            urlParams.set(\"paths\", pathsArray.join(\",\"));\n        } else {\n            urlParams.delete(\"paths\");\n        }\n        this.setState({selectedPaths});\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.geckoMetadata !== this.state.geckoMetadata ||\n            !arraysEqual(prevState.selectedPaths, this.state.selectedPaths)) {\n            this.filterGeckoMetadata();\n        }\n    }\n\n    render() {\n        let paths = this.state.bugComponentsMap.get(this.state.currentBugComponent);\n        let body;\n        if (this.state.loading_state != LOADING_STATE.COMPLETE) {\n            body = <p>Loading…</p>;\n        } else {\n            body = [<section id=\"selector\">\n                      <RunInfo runs={this.state.wptRuns}/>\n                      <BugComponentSelector onComponentChange={this.onComponentChange}\n                                            components={this.state.bugComponents}\n                                            value={this.state.currentBugComponent} />\n                      <TestPaths\n                        paths={paths}\n                        selectedPaths={this.state.selectedPaths}\n                        onChange={this.onPathsChange} />\n                    </section>,\n                    <section id=\"details\">\n                      <Tabs>\n                        <ResultsView label=\"Firefox-only Failures\"\n                                     failsIn={[\"firefox\"]}\n                                     passesIn={[\"safari\", \"chrome\"]}\n                                     runs={this.state.wptRuns}\n                                     paths={Array.from(this.state.selectedPaths)}\n                                     geckoMetadata={this.state.pathMetadata}\n                                     onError={this.onError}>\n                          <h2>Firefox-only Failures</h2>\n                          <p>Tests that pass in Chrome and Safari but fail in Firefox.</p>\n                        </ResultsView>\n                        <ResultsView label=\"All Firefox Failures\"\n                                     failsIn={[\"firefox\"]}\n                                     passesIn={[]}\n                                     runs={this.state.wptRuns}\n                                     paths={Array.from(this.state.selectedPaths)}\n                                     geckoMetadata={this.state.pathMetadata}\n                                     onError={this.onError}>\n                          <h2>All Firefox Failures</h2>\n                          <p>Tests that fail in Firefox</p>\n                        </ResultsView>\n                        <GeckoData label=\"Gecko Data\"\n                                   data={this.state.pathMetadata}\n                                   paths={Array.from(this.state.selectedPaths)}\n                                   onError={this.onError}>\n                          <h2>Gecko metadata</h2>\n                          <p>Gecko metadata in <code>testing/web-platform/meta</code> taken from latest mozilla-central.</p>\n                          <p>Note: this data is currently not kept up to date</p>\n                        </GeckoData>\n                      </Tabs>\n                    </section>];\n        }\n        return (\n            <div id=\"app\">\n              <ErrorArea errors={this.state.errors}\n                         onDismissError={this.onDismissError}/>\n              <header>\n                <h1>wpt interop dashboard</h1>\n              </header>\n              {body}\n            </div>\n        );\n    }\n}\n\nclass ErrorArea extends Component {\n    onDismiss = (id) => {\n        this.props.onDismissError(id);\n    }\n\n    render() {\n        if (!this.props.errors.length) {\n            return null;\n        }\n        let errorLines = [];\n        for (let [idx, error] of enumerate(this.props.errors)) {\n            errorLines.push(<ErrorLine\n                              key={`error-${error.id}`}\n                              error={error}\n                              onDismiss={() => this.onDismiss(idx)}/>);\n        }\n        return (<ul className=\"errors\">\n                  {errorLines}\n                </ul>);\n    }\n}\n\nclass ErrorLine extends Component {\n    render() {\n        let {id, err, options} = this.props.error;\n        let extraControls = [];\n        if (options.retry) {\n            let retry = () => {\n                this.props.onDismiss(id);\n                options.retry();\n            };\n            extraControls.push(<button onClick={retry} key=\"retry\">Retry</button>);\n        }\n        return (<li>\n                  {err.message || \"Unknown Error\"}\n                  <button onClick={() => this.props.onDismiss(id)}>Close</button>\n                  {extraControls}\n                </li>);\n    }\n}\n\nclass RunInfo extends Component {\n    render() {\n        if (!this.props.runs) {\n            return null;\n        }\n        let shortRev = this.props.runs[0].revision;\n        let longRev = this.props.runs[0].full_revision_hash;\n        let url = makeWptFyiUrl(\"\", {sha: longRev});\n        return (<dl>\n          <dt>wpt SHA1:</dt>\n          <dd><a href={url}>{shortRev}</a></dd>\n        </dl>);\n    }\n}\n\nclass BugComponentSelector extends Component {\n    handleChange = (event) => {\n        this.props.onComponentChange(event.target.value);\n    }\n\n    render() {\n        let selectItems = this.props.components.map(component => <option value={component.toLowerCase()} key={component.toLowerCase()}>{component}</option>);\n        if (!this.props.value) {\n            return null;\n        }\n        return (<section>\n                  <label>Bug Component: </label>\n                  <select\n                    onChange={this.handleChange}\n                    value={this.props.value}>\n                    {selectItems}\n                  </select>\n                </section>\n               );\n    }\n}\n\nclass TestPaths extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: new Set(this.props.paths)\n        };\n    }\n\n    onCheckboxChange = (path, checked) => {\n        let paths = new Set(this.state.paths);\n        if (checked) {\n            paths.add(path);\n        } else {\n            paths.delete(path);\n        }\n        this.setState({paths});\n    }\n\n    onUpdateClick = () => {\n        this.props.onChange(this.state.paths);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.selectedPaths !== this.props.selectedPaths) {\n            this.setState({paths: new Set(this.props.selectedPaths)});\n        }\n    }\n\n    render() {\n        if (!this.props.paths) {\n            return null;\n        }\n        let listItems = this.props.paths.sort().map(path => (\n            <li key={path}>\n              <Checkbox\n                checked={this.props.selectedPaths.has(path)}\n                value={path}\n                onCheckboxChange={this.onCheckboxChange} />\n              {path}\n            </li>));\n        return (<section>\n                  <h2>Test Paths</h2>\n                  <button\n                    onClick={this.onUpdateClick}\n                    disabled={setsEqual(this.state.paths, this.props.selectedPaths)}>\n                    Update\n                  </button>\n                  <ul id=\"test-paths\">\n                    {listItems}\n                  </ul>\n                </section>);\n    }\n}\n\nclass Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: this.props.checked\n        };\n    }\n\n    handleChange = (event) => {\n        this.setState({checked: event.target.checked ? true : false});\n        this.props.onCheckboxChange(this.props.value, event.target.checked);\n    }\n\n    render() {\n        return (<input\n                  name={this.props.path}\n                  type=\"checkbox\"\n                  checked={this.state.checked}\n                  onChange={this.handleChange} />);\n    }\n}\n\nclass ResultsView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading_state: LOADING_STATE.NONE,\n            results: [],\n        };\n    }\n\n    buildQuery() {\n        let query = {\n            run_ids: this.props.runs.map(item => item.id),\n            query: {\n                and: []\n            }\n        };\n        let topAndClause = query.query.and;\n\n        for (let browser of this.props.failsIn) {\n            for (let status of passStatuses) {\n                topAndClause.push({not : {\n                    browser_name: browser,\n                    status: status\n                }});\n            }\n        }\n\n        for (let browser of this.props.passesIn) {\n            let target;\n            if (passStatuses.size > 1) {\n                let orClause = {or: []};\n                topAndClause.push(orClause);\n                target = orClause.or;\n            } else {\n                target = topAndClause;\n            }\n\n            for (let status of passStatuses) {\n                target.push({\n                    browser_name: browser,\n                    status: status\n                });\n            }\n        }\n\n        if (this.props.paths.length > 1) {\n            topAndClause.push({\"or\": this.props.paths.map(path => {return {pattern: path + \"/\"};})});\n        } else {\n            topAndClause.push({pattern: this.props.paths[0]});\n        }\n        return query;\n    }\n\n    async fetchResults() {\n        let searchQuery = this.buildQuery();\n\n        let results;\n        try {\n            results = await fetchJson(makeWptFyiUrl(\"api/search\", {}), {\n                method: \"POST\",\n                body: JSON.stringify(searchQuery),\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            });\n        } catch(e) {\n            this.props.onError(e, {retry: async () => this.fetchResults()});\n            this.setState({loading_state: LOADING_STATE.COMPLETE});\n            throw e;\n        }\n\n        // The search for paths is \"contains\" so filter to only paths that start with the relevant\n        // directories\n\n        let pathRe = new RegExp(this.props.paths.map(path => `^${path}/`).join(\"|\"));\n        results.results = results.results.filter(result => pathRe.test(result.test));\n\n        this.setState({results, loading_state: LOADING_STATE.COMPLETE});\n    }\n\n    getMetadata(test) {\n        let metadata = new Map();\n        let dirParts = test.split(\"/\");\n        let testName = dirParts[dirParts.length - 1];\n        dirParts = dirParts.slice(1, dirParts.length - 1);\n        let dirPath = \"\";\n\n        function copyMeta(src) {\n            for (let [key, value] of Object.entries(src)) {\n                if (key[0] !== \"_\") {\n                    metadata.set(key, value);\n                }\n            }\n        }\n\n        for (let part of dirParts) {\n            if (dirPath.length) {\n                dirPath += \"/\";\n            }\n            dirPath += part;\n            let dirMeta = this.props.geckoMetadata[dirPath];\n            if (dirMeta) {\n                copyMeta(dirMeta);\n            }\n        }\n\n        let dirMetadata = this.props.geckoMetadata[dirPath];\n        if (dirMetadata && dirMetadata._tests && dirMetadata._tests[testName]) {\n            let testMetadata = dirMetadata._tests[testName];\n            copyMeta(testMetadata);\n            if (testMetadata._subtests) {\n                metadata._subtests = new Map();\n                for (let [key, value] of Object.entries(testMetadata._subtests)) {\n                    metadata._subtests.set(key, new Map(Object.entries(value)));\n                }\n            }\n        }\n        return metadata;\n    }\n\n    render() {\n        if (this.state.loading_state !== LOADING_STATE.COMPLETE) {\n            return (<div>\n                      {this.props.children}\n                      <p>Loading…</p>\n                    </div>);\n        }\n        if (this.state.results === null) {\n            return (<div>\n                      {this.props.children}\n                      <p>Load failed</p>\n                    </div>);\n        }\n        if (!this.state.results.results.length) {\n            return (<div>\n                      {this.props.children}\n                      <p>No results</p>\n                    </div>);\n        }\n        let testItems = this.state.results.results.map(result => (<TestItem\n                                                                    failsIn={this.props.failsIn}\n                                                                    passesIn={this.props.passesIn}\n                                                                    runs={this.props.runs}\n                                                                    result={result}\n                                                                    key={result.test}\n                                                                    geckoMetadata={this.getMetadata(result.test)}\n                                                                    onError={this.props.onError}/>));\n        testItems.sort((a,b) => (a.key > b.key ? 1 : (a.key === b.key ? 0 : -1)));\n        return (<div>\n                  {this.props.children}\n                  <p>{this.state.results.results.length} top-level tests with\n                    &nbsp;{this.state.results.results\n                     .map(x => x.legacy_status[0].total)\n                     .reduce((x,y) => x+y, 0)} subtests</p>\n                  <ul>{testItems}</ul>\n                </div>);\n    }\n\n    async componentDidMount() {\n        await this.fetchIfPossible({});\n    }\n\n    async componentDidUpdate(prevProps) {\n        await this.fetchIfPossible(prevProps);\n    }\n\n    async fetchIfPossible(prevProps) {\n        if (this.state.loading_state === LOADING_STATE.LOADING) {\n            return;\n        }\n        if (this.props.runs === null) {\n            return;\n        }\n        if (!this.props.paths) {\n            return;\n        }\n        if (this.state.loading_state === LOADING_STATE.COMPLETE &&\n            this.props.paths === prevProps.paths &&\n            this.props.failsIn === prevProps.failsIn &&\n            this.props.passesIn === prevProps.passesIn) {\n            return;\n        }\n        if (!this.props.paths.length) {\n            this.setState({results: {results: []},\n                           loading_state: LOADING_STATE.COMPLETE});\n            return;\n        }\n        this.setState({results: null,\n                       loading_state: LOADING_STATE.LOADING});\n        await this.fetchResults();\n    }\n}\n\nclass TreeRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDetails: false\n        };\n    }\n\n    handleClick = () => {\n        this.setState({showDetails: !this.state.showDetails});\n    }\n\n    render() {\n        return (<li className={\"tree-row\" + (this.state.showDetails ? \" tree-row-expanded\" : \"\")}>\n                  <span onClick={this.handleClick}>\n                    {this.state.showDetails ? \"\\u25BC \" : \"\\u25B6 \"}\n                    {this.props.rowTitle}\n                  </span>\n                  {this.props.rowExtra}\n                  {this.state.showDetails ? (<div className=\"tree-row\">\n                                               {this.props.children}\n                                             </div>) : \"\"}\n               </li>);\n    }\n\n}\n\nclass TestItem extends Component {\n    render() {\n        // TODO: Difference between test path and file path\n        let rowTitle = `${this.props.result.test} [${this.props.result.legacy_status[0].total} subtests]`;\n        return (\n                <TreeRow rowTitle={<code>{rowTitle}</code>}\n                  rowExtra={null}>\n                  <TestDetails\n                    runs={this.props.runs}\n                    test={this.props.result.test}\n                    passesIn={this.props.passesIn}\n                    failsIn={this.props.failsIn}\n                    geckoMetadata={this.props.geckoMetadata}\n                    onError={this.props.onError} />\n            </TreeRow>\n        );\n    }\n}\n\nclass TestDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            results: null\n        };\n    }\n\n    processResultData(results) {\n        let resultBySubtest = new Map();\n        for (let [browser, browserResults] of results) {\n            if (!resultBySubtest.has(null)) {\n                resultBySubtest.set(null, new Map());\n            }\n            resultBySubtest.get(null).set(browser, {status: browserResults.status,\n                                                    message: browserResults.message});\n            for (let subtest of browserResults.subtests) {\n                if (!resultBySubtest.has(subtest.name)) {\n                    resultBySubtest.set(subtest.name, new Map());\n                }\n                resultBySubtest.get(subtest.name).set(browser, {status: subtest.status,\n                                                                message: subtest.message});\n            }\n        }\n\n        for (let resultByBrowser of resultBySubtest.values()) {\n            for (let run of this.props.runs) {\n                let browser = run.browser_name;\n                if (!resultByBrowser.has(browser)) {\n                    resultByBrowser.set(browser, {status: \"MISSING\",\n                                                  message: null});\n                }\n            }\n        }\n\n        let filteredResultBySubtest = new Map();\n        // Filter out subtest results that don't match the current filters\n        for (let [subtest, resultByBrowser] of resultBySubtest) {\n            if (this.props.passesIn.every(browser => passStatuses.has(resultByBrowser.get(browser).status)) &&\n                this.props.failsIn.every(browser => !passStatuses.has(resultByBrowser.get(browser).status))) {\n                filteredResultBySubtest.set(subtest, resultByBrowser);\n            }\n        }\n\n        let rv = [];\n        if (filteredResultBySubtest.has(null)) {\n            rv.push([null, filteredResultBySubtest.get(null)]);\n            filteredResultBySubtest.delete(null);\n        }\n\n        return rv.concat(Array.from(filteredResultBySubtest));\n    }\n\n    async fetchData() {\n        let resultData = new Map();\n        let browsers = [];\n        let promises = [];\n        for (let run of this.props.runs) {\n            let browser = run.browser_name;\n            let summaryUrl = run.results_url;\n            let parts = summaryUrl.split('-');\n            // Remove the part of the url after the last -\n            parts.pop();\n            let url = `${parts.join('-')}${this.props.test}`;\n            let promise = fetchJson(url)\n                .then(x => {return {success: true, value:x};})\n                .catch(e => {return {success: false, value:e};});\n            browsers.push(browser);\n            promises.push(promise);\n        }\n        let resolved = await Promise.all(promises);\n        for (let [idx, data] of enumerate(resolved)) {\n            if (data.success) {\n                let browser = browsers[idx];\n                resultData.set(browser, data.value);\n            }\n        }\n        let filteredResults = this.processResultData(resultData);\n        this.setState({results: filteredResults,\n                       loaded: true});\n\n    }\n\n    async componentDidMount() {\n        await this.fetchData();\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <p>Loading</p>;\n        }\n        let headerRow = this.props.runs.map(run => <th key={run.browser_name}>{run.browser_name}</th>);\n        headerRow.push(<th key=\"metadata\"></th>);\n        let subtestMetadata = this.props.geckoMetadata.get(\"_subtests\") || new Map();\n        let resultRows = this.state.results.map(([subtest, results]) => (<ResultRow\n                                                                           key={subtest}\n                                                                           runs={this.props.runs}\n                                                                           subtest={subtest}\n                                                                           results={results}\n                                                                           geckoMetadata={subtestMetadata.get(subtest)} />));\n        return (<div>\n                  <ul>\n                    <li><a href={`http://w3c-test.org${this.props.test}`}>Live test</a></li>\n                    <li><a href={makeWptFyiUrl(`results/${this.props.test}`)}>wpt.fyi</a></li>\n                    <li><a href={`http://searchfox.org/mozilla-central/source/testing/web-platform/meta${testToPath(this.props.test)}.ini`}>Gecko Metadata</a></li>\n                  </ul>\n                  <MetaSummary\n                    test={this.props.test}\n                    data={this.props.geckoMetadata}/>\n                  <section>\n                    <h3>Results</h3>\n                    <table className=\"results\">\n                      <thead>\n                        <tr>\n                          <th></th>\n                          {headerRow}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {resultRows}\n                      </tbody>\n                    </table>\n                  </section>\n                </div>);\n    }\n}\n\nclass MetaSummary extends Component {\n    render() {\n        let renderBug = value => <MaybeBugLink value={value} />;\n        let items;\n        if (this.props.data) {\n            let metaProps = [{name: \"disabled\", render: renderBug},\n                             {name: \"bug\", render: renderBug},\n                             {name: \"crash\", title: \"Crashes\", render: renderBug}];\n            items = metaProps\n                .map(item => {\n                    if (this.props.data.has(item.name)) {\n                        return (<InlineOrTreeMetadata\n                                  key={item.name}\n                                  title={item.title ? item.title : capitalize(item.name)}\n                                  values={this.props.data.get(item.name)}\n                                  render={item.render}/>);\n                    }\n                    return null;\n                })\n                .filter(x => x !== null);\n        } else {\n            items = [];\n        }\n        if (items.length === 0) {\n            return null;\n        }\n        return (<section>\n                  <h3>Gecko Metadata</h3>\n                  <ul>\n                    {items}\n                  </ul>\n                </section>);\n    }\n}\n\nclass InlineOrTreeMetadata extends Component {\n    render() {\n        if (!this.props.values) {\n            return null;\n        }\n        if (this.props.values.length === 1 && this.props.values[0][0] === null) {\n            // We have a single unconditional value for the property so render inline\n            return (<li>\n                      {this.props.title}: {this.props.render(this.props.values[0])}\n                    </li>);\n        } else {\n            return (<GeckoMetadataLine\n                      title={this.props.title}\n                      values={this.props.values}\n                      render={this.props.render}/>);\n        }\n    }\n}\n\nclass ResultRow extends Component {\n    render() {\n        let cells = this.props.runs.map(run => {\n            let result = this.props.results.get(run.browser_name);\n            return <ResultCell result={result} key={run.browser_name}/>;\n        });\n        cells.push(<td key=\"metadata\">\n                     <MetaSummary\n                       data={this.props.geckoMetadata} />\n                   </td>);\n        return (<tr>\n                  <th>{this.props.subtest ? this.props.subtest : \"<parent>\"}</th>\n                  {cells}\n                </tr>);\n    }\n}\n\nclass ResultCell extends Component {\n    render() {\n        return (<td\n                  className={`result result-${this.props.result.status.toLowerCase()}`}\n                  title={this.props.result.message}>\n                  {this.props.result.status}\n                </td>);\n    }\n}\n\nclass GeckoData extends Component {\n    groupData() {\n        let disabled = new Map();\n        let lsan = new Map();\n        let crashes = new Map();\n\n        for (let [dir, dirData] of Object.entries(this.props.data)) {\n            if (dirData.disabled) {\n                disabled.set(dir, dirData.disabled);\n            }\n            if (dirData['lsan-allowed']) {\n                lsan.set(dir, dirData['lsan-allowed']);\n            }\n            if (dirData.expected_CRASH) {\n                crashes.set(dir, dirData.expected_CRASH.map(cond => [cond, null]));\n            }\n            if (!dirData._tests) {\n                continue;\n            }\n            for (let [test, testData] of Object.entries(dirData._tests)) {\n                let testKey = `${dir}/${test}`;\n                if (testData.disabled) {\n                    disabled.set(testKey, testData.disabled);\n                }\n                if (testData.expected_CRASH) {\n                    crashes.set(testKey, testData.expected_CRASH.map(cond => [cond, null]));\n                }\n                if (!testData._subtests) {\n                    continue;\n                }\n                for (let [subtest, subtestData] of Object.entries(testData._subtests)) {\n                    let subtestKey = `${dir}/${test} | ${subtest}`;\n                    if (subtestData.disabled) {\n                        disabled.set(subtestKey, subtestData.disabled);\n                    }\n                    if (subtestData.expected_CRASH) {\n                        crashes.set(subtestKey, subtestData.expected_CRASH.map(cond => [cond, null]));\n                    }\n                }\n            }\n        }\n        return {disabled, lsan, crashes};\n    }\n\n    render() {\n        let content;\n        if (this.props.data === null) {\n            content = <p>Loading</p>;\n        } else {\n            content = [];\n            let byType = this.groupData();\n            if (byType.crashes) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.crashes)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => null}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"crashes\">\n                                   <h2>Crashes</h2>\n                                   <p>{items.length} tests crash in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.disabled) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.disabled)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <MaybeBugLink value={value} />}/>);\n                }\n                if (items.length) {\n                    content.push(<section key=\"disabled\">\n                                   <h2>Disabled</h2>\n                                   <p>{items.length} tests are disabled in some configurations</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            if (byType.lsan) {\n                let items = [];\n                for (let [test, values] of iterMapSorted(byType.lsan)) {\n                    items.push(<GeckoMetadataLine\n                                 key={test}\n                                 title={test}\n                                 values={values}\n                                 render={value => <LsanListValue value={value}/>} />);\n                }\n                if (items.length) {\n                    content.push(<section key=\"lsan\">\n                                   <h2>LSAN Failures</h2>\n                                   <p>{items.length} directories have LSAN failures</p>\n                                   <ul>{items}</ul>\n                                 </section>);\n                }\n            }\n            return (<section>\n                      {this.props.children}\n                      {content.length ? content : <p>No metadata available</p>}\n                    </section>);\n        }\n        return (<section>\n                  <h2>Gecko metadata</h2>\n                  <p>None</p>\n                </section>);\n    }\n}\n\nclass GeckoMetadataLine extends Component {\n    render() {\n        let values = [];\n        for (let [condition, value] of this.props.values) {\n            let conditionStr = condition ? `if ${condition}${value ? \": \" : \" \"}` : \"\";\n            values.push(<li\n                          key={condition ? condition : \"None\"}>\n                          <code>{conditionStr}</code>{value ? this.props.render(value): null}\n                        </li>);\n        }\n        let valueList = null;\n        if (values.length) {\n            valueList = <ul className=\"tree-row\">{values}</ul>;\n        }\n        return (<TreeRow\n                  rowTitle={this.props.title}\n                  rowExtra={null}>\n                  {valueList}\n                </TreeRow>);\n    }\n}\n\nclass MaybeBugLink extends Component {\n    render() {\n        const bugLinkRe = /https?:\\/\\/bugzilla\\.mozilla\\.org\\/show_bug\\.cgi\\?id=(\\d+)/;\n        const bugNumberRe = /(?:bug\\s+)?(\\d+)/i;\n        for (let re of [bugLinkRe, bugNumberRe]) {\n            let match = re.exec(this.props.value);\n            if (match !== null) {\n                return <a href={`https://bugzilla.mozilla.org/show_bug.cgi?id=${match[1]}`}>Bug {match[1]}</a>;\n            }\n        }\n        return this.props.value;\n    }\n}\n\nclass LsanListValue extends Component {\n    render() {\n        if (Array.isArray(this.props.value)) {\n            let frames = this.props.value.map(x => <li key={x}><code>{x}</code></li>);\n            return (<ul>{frames}</ul>);\n        }\n        return this.props.value;\n    }\n}\n\n\nclass Tabs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeTab: urlParams.get('tab') || this.props.children[0].props.label\n        };\n    }\n\n    handleClickTab = (label) => {\n        this.setState({activeTab: label});\n        urlParams.set('tab', label);\n    }\n\n    render() {\n        let tabItems = this.props.children.map(child => {\n            let label = child.props.label;\n            return (<Tab\n                      active = {this.state.activeTab === label}\n                      label = {label}\n                      key = {label}\n                      onClick = {this.handleClickTab}\n                    />);\n        });\n        let activeTabContent = this.props.children.find(child => child.props.label === this.state.activeTab);\n        return (<div className=\"tab-view\">\n                  <ol className=\"tab-strip\">\n                    {tabItems}\n                  </ol>\n                  <div className=\"tab-content\">\n                    {activeTabContent}\n                  </div>\n                </div>);\n    }\n}\n\nclass Tab extends Component {\n    onClick = () => {\n        this.props.onClick(this.props.label);\n    }\n\n    render() {\n        return (<li\n                  className={\"tab-label \" + (this.props.active ? \"tab-active\" : \"\")}\n                  onClick={this.onClick}>\n                  {this.props.label}\n                </li>);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}